maintainer="nox"
pkgname="binutils"
version=2.34
revision=2
short_desc="GNU binary utilities"
makedepends="zlib-devel"
if [[ -n "$CHROOT_READY" ]]; then
  depends="binutils-doc"
  makedepends+=" elfutils-devel"
  checkdepends="bc"
  hostmakedepends+=" flex"
  hostmakedepends+=" perl"
  hostmakedepends+=" texinfo"
fi
homepage="http://www.gnu.org/software/binutils/"
license="GPL-3.0-or-later"
distfiles="$GNU_SITE/binutils/$pkgname-$version.tar.xz"
checksum="f00b0e8803dc9bab1e2165bd568528135be734df3fabf8d0161828cd56028952"
bootstrap="yes"

_get_triplet() {
  if [[ -z "$XBPS_TRIPLET" ]]; then
    echo $(
      source "$XBPS_COMMONDIR/build-profiles/$XBPS_MACHINE.sh"
      echo "$XBPS_TRIPLET"
    )
  else
    echo "$XBPS_TRIPLET"
  fi
}

do_configure() {
  local CONFIGFLAG
  CONFIGFLAG="--build=$(_get_triplet)
    --prefix=/usr
    --enable-threads
    --enable-plugins
    --enable-secureplt
    --with-mmap
    --disable-shared
    --enable-gold
    --disable-werror
    --enable-deterministic-archives
    --enable-ld=default
    --disable-nls"
  if [[ -n "$CHROOT_READY" ]]; then
    CONFIGFLAG+=" --with-debuginfod"
  else
    CONFIGFLAG+=" --without-debuginfod"
  fi
  if [[ "$XBPS_TARGET_MACHINE" == "x86_64" ]]; then
    CONFIGFLAG+=" --enable-64-bit-bfd"
    CONFIGFLAG+=" --enable-multilib"
  fi
  if [[ -n "$CROSS_BUILD" ]]; then
    # do not use configure_args nor build_style=gnu-configure,
    # avoiding --with-sysroot to $XBPS_CROSS_BASE.
    CONFIGFLAG+=" --host=$XBPS_CROSS_TRIPLET"
    CONFIGFLAG+=" --with-build-sysroot=$XBPS_CROSS_BASE"
  fi
  if [[ "$XBPS_TARGET_MACHINE" == "mips-musl" ]] \
  || [[ "$XBPS_TARGET_MACHINE" == "mipsel-musl" ]]; then
    CONFIGFLAG+=" --with-float=soft"
    CONFIGFLAG+=" --without-fp"
  fi
  if [[ "${XBPS_TARGET_MACHINE%-musl}" == "x86_64" ]]; then
    CONFIGFLAG+=" --enable-targets=x86_64-pep"
  elif [[ "${XBPS_TARGET_MACHINE%-musl}" == "i686" ]]; then
    CONFIGFLAG+=" --enable-64-bit-bfd"
    CONFIGFLAG+=" --enable-targets=x86_64-linux-gnu,x86_64-pep"
  fi
  ./configure $CONFIGFLAG
}

do_build() {
  make "$makejobs"

  # rebuild libiberty.a with -fPIC
  cp -a libiberty libiberty-pic
  make -C libiberty-pic clean
  make CFLAGS="$CFLAGS -fPIC" -C libiberty-pic

  # rebuild libbfd.a with -fPIC
  cp -a bfd bfd-pic
  make -C bfd-pic clean
  # visibility=hidden to prevent 3rd-party shared libraries from exporting
  # bfd non-stable API
  make CFLAGS="$CFLAGS -fPIC -fvisibility=hidden" -C bfd-pic

  # rebuild libopcodes.a with -fPIC
  cp -a opcodes opcodes-pic
  make -C opcodes-pic clean
  make CFLAGS="$CFLAGS -fPIC" -C opcodes-pic
}

# if you enable this later, keep it off for `[[ -z "$CHROOT_READY" ]]`
do_check() {
  # seems like upstream forgot to include their new test-driver executable
  # in their tarball...
  :
}

do_install() {
  local _triplet
  make DESTDIR="$DESTDIR" tooldir="/usr" install

  # remove ld (hardlink) and make a symlink to ld.bfd
  rm -f "$DESTDIR/usr/bin/ld"
  ln -sfr "$DESTDIR/usr/bin/ld.bfd" "$DESTDIR/usr/bin/ld"

  # add some useful headers
  vinstall include/libiberty.h 644 usr/include
  vinstall include/demangle.h 644 usr/include

  # install libraries rebuilt with -fPIC
  vinstall libiberty-pic/libiberty.a 644 usr/lib
  vinstall bfd-pic/libbfd.a 644 usr/lib
  vinstall opcodes-pic/libopcodes.a 644 usr/lib

  # remove these symlinks, they are not ABI stable
  # programs should compile static to the .a file
  rm -f "$DESTDIR/usr/lib"/lib{bfd,opcodes}.so
  echo "INPUT ( /usr/lib/libbfd.a -liberty -lz )" >"$DESTDIR/usr/lib/libbfd.so"
  echo "INPUT ( /usr/lib/libopcodes.a -lbfd )" >"$DESTDIR/usr/lib/libopcodes.so"

  # remove useless manpages
  for f in dlltool \
           nlmconv \
           windres \
           windmc; do
    rm -f "$DESTDIR/usr/share/man/man1/$f.1"
  done

  # create triplet symlinks
  _triplet=$(_get_triplet)
  for f in "$DESTDIR/usr/bin"/*; do
    ln -s "${f##*/}" "$DESTDIR/usr/bin/${XBPS_CROSS_TRIPLET:-$_triplet}-${f##*/}"
  done
}

binutils-devel_package() {
  depends="zlib-devel"
  short_desc+=" - development files"
  pkg_install() {
    vmove usr/include
    vmove "usr/lib/*.a"
    vmove "usr/lib/*.so"
  }
}

binutils-doc_package() {
  short_desc+=" - info files"
  pkg_install() {
    vmove usr/share/info
    # remove info file that conflicts with autoconf
    rm -f "$PKGDESTDIR/usr/share/info/standards.info"
  }
}

# vim: set filetype=sh foldmethod=marker foldlevel=0 nowrap:
