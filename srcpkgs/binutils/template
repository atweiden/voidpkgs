maintainer="nox"
pkgname="binutils"
version=2.35.1
revision=4
short_desc="GNU binary utilities"
makedepends="zlib-devel"
homepage="http://www.gnu.org/software/binutils/"
license="GPL-3.0-or-later"
distfiles="$GNU_SITE/binutils/$pkgname-$version.tar.xz"
checksum="3ced91db9bf01182b7e420eab68039f2083aed0a214c0424e257eae3ddee8607"
patch_args="-Np1"
subpackages="binutils-doc"
bootstrap="yes"

if [[ -n "$CHROOT_READY" ]]; then
  unset hostmakedepends
  depends="binutils-doc"
  makedepends+=" elfutils-devel"
  checkdepends="bc"
  hostmakedepends+=" flex"
  hostmakedepends+=" perl"
  hostmakedepends+=" texinfo"
  subpackages+=" binutils-devel"
fi

_get_triplet() {
  if [[ -z "$XBPS_TRIPLET" ]]; then
    echo $(
      source "$XBPS_COMMONDIR/build-profiles/$XBPS_MACHINE.sh"
      echo "$XBPS_TRIPLET"
    )
  else
    echo "$XBPS_TRIPLET"
  fi
}

do_configure() {
  local conf

  if [[ -n "$CHROOT_READY" ]]; then
    conf+=" --with-debuginfod"
  else
    conf+=" --without-debuginfod"
    conf+=" --disable-install-libbfd"
  fi
  if [[ -n "$CROSS_BUILD" ]]; then
    # we don't want --with-sysroot=$XBPS_CROSS_BASE like gnu-configure
    conf+=" --host=$XBPS_CROSS_TRIPLET"
    conf+=" --with-build-sysroot=$XBPS_CROSS_BASE"
  fi

  case "$XBPS_TARGET_MACHINE" in
    ppc*)
      conf+=" --enable-secureplt"
      ;;
    x86_64*)
      conf+=" --enable-targets=x86_64-pep"
      ;;
    i686*)
      conf+=" --enable-targets=x86_64-linux-gnu,x86_64-pep"
      ;;
  esac

  # enable multilib on x86_64 glibc
  if [[ "$XBPS_TARGET_MACHINE" == "x86_64" ]]; then
    conf+=" --enable-multilib"
  else
    conf+=" --disable-multilib"
  fi

  # ensure softfloat on sf mips targets and set the default hash style
  case "$XBPS_TARGET_MACHINE" in
    mips*hf*)
      conf+=" --enable-default-hash-style=sysv"
      ;;
    mips*)
      conf+=" --without-fp --enable-default-hash-style=sysv"
      ;;
    *)
      conf+=" --enable-default-hash-style=gnu"
      ;;
  esac

  mkdir build \
    && cd build
  ../configure \
    --build="$(_get_triplet)" \
    --prefix="/usr" \
    --libdir="/usr/lib" \
    --mandir="/usr/share/man" \
    --infodir="/usr/share/info" \
    --disable-werror \
    --disable-shared \
    --disable-nls \
    --enable-threads \
    --enable-plugins \
    --enable-relro \
    --enable-gold \
    --enable-deterministic-archives \
    --enable-64-bit-bfd \
    --enable-ld="default" \
    --with-system-zlib \
    --with-mmap \
    --with-pic \
    $conf
}

do_build() {
  cd "$wrksrc/build" \
    && make "$makejobs"
}

# there is a testsuite now, but e.g. ifunc tests all fail on musl and
# also there are other tests that fail on different targets for fairly
# harmless reasons and it's just too much effort to fix it all
do_check() {
  [[ -n "$CHROOT_READY" ]] \
    || return 0
  : # cba for now
}

do_install() {
  local _triplet

  cd "$wrksrc/build"

  _triplet="$(_get_triplet)"
  make \
    DESTDIR="$DESTDIR" \
    tooldir="/usr" \
    install

  cd ..

  # remove ld (hardlink) and make a symlink to ld.bfd
  rm -f "$DESTDIR/usr/bin/ld"
  ln -sfr "$DESTDIR/usr/bin/ld.bfd" "$DESTDIR/usr/bin/ld"

  if [[ -n "$CHROOT_READY" ]]; then
    # remove these symlinks, they are not ABI stable
    # programs should compile static to the .a file
    rm -f "$DESTDIR/usr/lib"/lib{bfd,opcodes}.so
    echo "INPUT ( /usr/lib/libbfd.a -liberty -lz )" > \
      "$DESTDIR/usr/lib/libbfd.so"
    echo "INPUT ( /usr/lib/libopcodes.a -lbfd )" > \
      "$DESTDIR/usr/lib/libopcodes.so"
  fi

  # remove useless manpages
  for f in dlltool \
           nlmconv \
           windres \
           windmc; do
    rm -f "$DESTDIR/usr/share/man/man1/$f.1"
  done

  # create triplet symlinks
  for f in "$DESTDIR/usr/bin"/*; do
    ln -s "${f##*/}" "$DESTDIR/usr/bin/${XBPS_CROSS_TRIPLET:-$_triplet}-${f##*/}"
  done
}

binutils-devel_package() {
  if [[ -n "$CHROOT_READY" ]]; then
    unset depends
    depends+=" libiberty-devel"
    depends+=" zlib-devel"
  fi
  short_desc+=" - development files"
  pkg_install() {
    vmove usr/include
    vmove "usr/lib/*.a"
    vmove "usr/lib/*.so"
  }
}

binutils-doc_package() {
  short_desc+=" - info files"
  pkg_install() {
    vmove usr/share/info
    # remove info file that conflicts with autoconf
    rm -f "$PKGDESTDIR/usr/share/info/standards.info"
  }
}

# vim: set filetype=sh foldmethod=marker foldlevel=0 nowrap:
