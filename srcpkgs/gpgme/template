maintainer="nox"
pkgname="gpgme"
version=1.23.1
revision=2
short_desc="GnuPG Made Easy"
makedepends+=" libassuan-devel"
makedepends+=" python3-devel"
checkdepends+=" gnupg"
checkdepends+=" which"
hostmakedepends+=" gnupg"
hostmakedepends+=" pkg-config"
hostmakedepends+=" python3-build"
hostmakedepends+=" python3-installer"
hostmakedepends+=" python3-setuptools"
hostmakedepends+=" python3-wheel"
hostmakedepends+=" swig"
homepage="https://www.gnupg.org/software/gpgme/index.html"
license="GPL-2.0-or-later, LGPL-2.1-or-later"
changelog="https://git.gnupg.org/cgi-bin/gitweb.cgi?p=gpgme.git;a=blob_plain;f=NEWS;hb=HEAD"
distfiles="https://www.gnupg.org/ftp/gcrypt/gpgme/$pkgname-$version.tar.bz2"
checksum="a0c316f7ab7d3bfb01a8753c3370dc906e5b61436021f3b54ff1483b513769bd"
build_style="gnu-configure"
build_helper="python3"
configure_args+=" --enable-fd-passing"
configure_args+=" --with-libassuan-prefix=$XBPS_CROSS_BASE/usr"
configure_args+=" --with-libgpg-error-prefix=$XBPS_CROSS_BASE/usr"

CXXFLAGS="-D_GLIBCXX_USE_C99_STDIO=1"

if [[ "$XBPS_TARGET_LIBC" == "musl" ]]; then
  configure_args+=" ac_cv_sys_file_offset_bits=no"
elif [[ "$XBPS_TARGET_WORDSIZE" == "32" ]]; then
  CFLAGS="-D_FILE_OFFSET_BITS=64 -DLARGEFILE_SOURCE=1"
  CXXFLAGS+=" $CFLAGS"
fi

post_build() {
  cd lang/python
  top_builddir="../.." python -m build --wheel --no-isolation
}

post_install() {
  cd lang/python
  python -m installer --destdir="$DESTDIR" dist/*.whl
}

libgpgme_package() {
  # posix-util.c call gpgconf to get GnuPG binaries
  depends="gnupg>=2"
  short_desc+=" - library"
  pkg_install() {
    vmove "usr/lib/*.so.*"
  }
}

gpgme-python3_package() {
  short_desc+=" - Python binding"
  depends="gpgme"
  pkg_install() {
    vmove "$py3_sitelib"
    rm -r "$PKGDESTDIR/$py3_sitelib"/gpg*.egg
  }
}

python3-gpg_package() {
  short_desc+=" - Python binding (transitional dummy package)"
  build_style="meta"
  depends="gpgme-python3>=${version}_$revision"
}

gpgme-devel_package() {
  unset depends
  depends+=" $makedepends"
  depends+=" libgpgme>=${version}_$revision"
  short_desc+=" - development files"
  pkg_install() {
    vmove usr/lib/pkgconfig
    vmove usr/bin/gpgme-config
    vmove usr/include/gpgme.h
    vmove usr/share
    vmove usr/lib/libgpgme.so
  }
}

gpgmepp_package() {
  short_desc+=" - C++ library"
  pkg_install() {
    vmove "usr/lib/libgpgmepp.so.*"
  }
}

gpgmepp-devel_package() {
  unset depends
  depends+=" gpgme-devel>=${version}_$revision"
  depends+=" gpgmepp>=${version}_$revision"
  short_desc+=" - C++ library - development files"
  pkg_install() {
    vmove usr/include/gpgme++
    vmove usr/lib/libgpgmepp.so
    vmove usr/lib/cmake/Gpgmepp/GpgmeppConfig.cmake
    vmove usr/lib/cmake/Gpgmepp/GpgmeppConfigVersion.cmake
  }
}

# vim: set filetype=sh foldmethod=marker foldlevel=0 nowrap:
