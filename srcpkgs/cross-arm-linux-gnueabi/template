_binutils_version=2.29.1
_gcc_version=8.2.0
_glibc_version=2.28
_linux_version=4.9.8

_triplet="arm-linux-gnueabi"
_fpuflags="--with-arch=armv5te --without-fp --with-float=soft"
_archflags="-march=armv5te -msoft-float -mfloat-abi=soft"
_sysroot="/usr/$_triplet"

maintainer="Andy Weidenbaum <archbaum@gmail.com>"
pkgname="cross-$_triplet"
version=0.28
revision=1
short_desc="GNU Cross toolchain for the $_triplet LE target (binutils/gcc/glibc)"
only_for_archs+=" i686"
only_for_archs+=" x86_64"
depends="$pkgname-libc-${version}_$revision"
makedepends+=" gmp-devel"
makedepends+=" isl15-devel"
makedepends+=" libmpc-devel"
makedepends+=" mpfr-devel"
makedepends+=" zlib-devel"
hostmakedepends+=" flex"
hostmakedepends+=" perl"
homepage="http://www.voidlinux.eu"
license="GPL-2.0-or-later, GPL-3.0-or-later, LGPL-2.1.0-or-later"
distfiles+=" $GNU_SITE/binutils/binutils-$_binutils_version.tar.bz2"
distfiles+=" $GNU_SITE/gcc/gcc-$_gcc_version/gcc-$_gcc_version.tar.xz"
distfiles+=" $GNU_SITE/glibc/glibc-$_glibc_version.tar.xz"
distfiles+=" $KERNEL_SITE/kernel/v4.x/linux-$_linux_version.tar.xz"
checksum+=" 1509dff41369fb70aed23682351b663b56db894034773e6dbf7d5d6071fc55cc"
checksum+=" 196c3c04ba2613f893283977e6011b2345d1cd1af9abeac58e916b1aab3e0080"
checksum+=" b1900051afad76f7a4f73e71413df4826dce085ef8ddb785a945b66d7d513082"
checksum+=" 150bb7f2dd4849b5d21b8ccd8d05294a48229e1fcb93a22e7b806a79ec0b0e45"
create_wrksrc="yes"
lib32disabled="yes"
nocross="yes"
nopie="yes"
nodebug="yes"
nostrip_files+=" libcaf_single.a"
nostrip_files+=" libgcc.a"
nostrip_files+=" libgcc_eh.a"
nostrip_files+=" libgcov.a"

_apply_patch() {
  local args="$1"
  local pname="$(basename $2)"
  if [ ! -f ".${pname}_done" ]; then
    patch -N "$args" -i "$2"
    touch ".${pname}_done"
  fi
}

_linux_headers() {
  [[ -f "$wrksrc/.linux_build_done" ]] \
    && return 0

  cd "$wrksrc"
  msg_normal "Building Linux API headers for ARM\n"

  cd "linux-$_linux_version"
  make ARCH="arm" headers_check
  make ARCH="arm" INSTALL_HDR_PATH="$_sysroot/usr" headers_install
  touch "$wrksrc/.linux_build_done"
}

_binutils_build() {
  local _args
  [[ -f "$wrksrc/.binutils_build_done" ]] \
    && return 0

  cd "$wrksrc"
  msg_normal "Building cross binutils\n"
  ! [[ -d "binutils-build" ]] \
    && mkdir binutils-build
  cd binutils-build

  _args+=" --disable-multilib"
  _args+=" --disable-nls"
  _args+=" --disable-shared"
  _args+=" --disable-werror"
  _args+=" --prefix=/usr"
  _args+=" --target=$_triplet"
  _args+=" --with-sysroot=$_sysroot"
  _args+=" --with-system-zlib"

  "../binutils-$_binutils_version/configure" $_args
  make configure-host
  make "$makejobs"
  make install
  touch "$wrksrc/.binutils_build_done"
}

_gcc_bootstrap() {
  local _args

  [[ -f "$wrksrc/.gcc_bootstrap_done" ]] \
    && return 0

  cd "$wrksrc/gcc-$_gcc_version"
  _apply_patch -p0 "$FILESDIR/fix-cxxflags-passing.patch"

  msg_normal "Building cross gcc bootstrap\n"

  ! [[ -d ../gcc-bootstrap ]] \
    && mkdir ../gcc-bootstrap
  cd ../gcc-bootstrap

  _args+=" $_fpuflags"
  _args+=" --disable-decimal-float"
  _args+=" --disable-libatomic"
  _args+=" --disable-libgomp"
  _args+=" --disable-libitm"
  _args+=" --disable-libmpx"
  _args+=" --disable-libmudflap"
  _args+=" --disable-libquadmath"
  _args+=" --disable-libssp"
  _args+=" --disable-multilib"
  _args+=" --disable-nls"
  _args+=" --disable-shared"
  _args+=" --disable-sjlj-exceptions"
  _args+=" --disable-threads"
  _args+=" --enable-languages=c"
  _args+=" --prefix=/usr"
  _args+=" --target=$_triplet"
  _args+=" --with-gnu-as"
  _args+=" --with-gnu-ld"
  _args+=" --without-headers"

  CFLAGS="-O0 -g0" \
  CXXFLAGS="-O0 -g0" \
    "../gcc-$_gcc_version/configure" $_args

  make "$makejobs"
  make install
  touch "$wrksrc/.gcc_bootstrap_done"
}

_glibc_headers() {
  local _args
  local f

  [[ -f "$wrksrc/.glibc_headers_done" ]] \
    && return 0

  cd "$wrksrc/glibc-$_glibc_version"
  for f in "$XBPS_SRCPKGDIR/glibc/patches"/*.patch; do
    _apply_patch -p1 "$f"
  done

  cd "$wrksrc"
  msg_normal "Building cross glibc headers\n"

  ! [[ -d glibc-headers ]] \
    && mkdir glibc-headers
  cd glibc-headers

  echo "libc_cv_forced_unwind=yes" > config.cache
  echo "libc_cv_c_cleanup=yes" >> config.cache

  export AS="$_triplet-as"
  export CC="$_triplet-gcc"
  export CPP="$_triplet-cpp"
  export LD="$_triplet-ld"

  _args+=" $_fpuflags"
  _args+=" --config-cache"
  _args+=" --enable-kernel=2.6.27"
  _args+=" --enable-obsolete-nsl"
  _args+=" --enable-obsolete-rpc"
  _args+=" --host=$_triplet"
  _args+=" --prefix=/usr"
  _args+=" --with-headers=$_sysroot/usr/include"

  "../glibc-$_glibc_version/configure" $_args
  make -k install-headers cross_compiling="yes" install_root="$_sysroot"
  touch "$wrksrc/.glibc_headers_done"
}

_glibc_build() {
  local _args
  [[ -f $wrksrc/.glibc_build_done ]] \
    && return 0

  cd "$wrksrc"
  msg_normal "Building cross glibc\n"

  ! [[ -d "glibc-build" ]] \
    && mkdir glibc-build
  cd glibc-build

  echo "libc_cv_forced_unwind=yes" > config.cache
  echo "libc_cv_c_cleanup=yes" >> config.cache

  export AS="$_triplet-as"
  export CC="$_triplet-gcc"
  export CFLAGS="-Os -pipe $_archflags"
  export CPP="$_triplet-cpp"
  export LD="$_triplet-ld"

  _args+=" $_fpuflags"
  _args+=" --config-cache"
  _args+=" --disable-profile"
  _args+=" --disable-werror"
  _args+=" --enable-kernel=2.6.27"
  _args+=" --enable-obsolete-nsl"
  _args+=" --enable-obsolete-rpc"
  _args+=" --host=$_triplet"
  _args+=" --prefix=/usr"
  _args+=" --with-headers=$_sysroot/usr/include"

  "../glibc-$_glibc_version/configure" $_args
  make "$makejobs"
  make install_root="$_sysroot" install
  touch "$wrksrc/.glibc_build_done"
}

_gcc_build() {
  local _args
  [[ -f "$wrksrc/.gcc_build_done" ]] \
    && return 0

  cd "$wrksrc"
  msg_normal "Building cross gcc final\n"

  ! [[ -d "gcc-build" ]] \
    && mkdir gcc-build
  cd gcc-build

  unset AS
  unset CPP
  unset LD
  export CC="gcc"
  export CFLAGS="-Os -pipe"

  # make this link to target libs
  if ! [[ -f ".sed_subst_done" ]]; then
    sed \
      -i \
      -e "s, /lib/, $_sysroot/lib/,g;s, /usr/lib/, $_sysroot/usr/lib/,g" \
      "$_sysroot/lib/libc.so" \
      "$_sysroot/lib/libpthread.so"
    touch .sed_subst_done
  fi

  _args+=" $_fpuflags"
  _args+=" --disable-libatomic"
  _args+=" --disable-libcilkrts"
  _args+=" --disable-libitm"
  _args+=" --disable-libmpx"
  _args+=" --disable-libmudflap"
  _args+=" --disable-libquadmath"
  _args+=" --disable-libsanitizer"
  _args+=" --disable-libssp"
  _args+=" --disable-libstdcxx-pch"
  _args+=" --disable-libvtv"
  _args+=" --disable-multilib"
  _args+=" --disable-nls"
  _args+=" --disable-sjlj-exceptions"
  _args+=" --disable-werror"
  _args+=" --enable-default-pie"
  _args+=" --enable-default-ssp"
  _args+=" --enable-gnu-unique-object"
  _args+=" --enable-languages=c,c++,fortran,lto"
  _args+=" --enable-libstdcxx-time"
  _args+=" --enable-linker-build-id"
  _args+=" --enable-long-longx"
  _args+=" --enable-lto"
  _args+=" --enable-shared"
  _args+=" --enable-threads=posix"
  _args+=" --libdir=/usr/lib"
  _args+=" --libexecdir=/usr/lib"
  _args+=" --prefix=/usr"
  _args+=" --target=$_triplet"
  _args+=" --with-gnu-as"
  _args+=" --with-gnu-ld"
  _args+=" --with-linker-hash-style=gnu"
  _args+=" --with-sysroot=$_sysroot"

  "../gcc-$_gcc_version/configure" $_args
  make "$makejobs"
  touch "$wrksrc/.gcc_build_done"
}

do_build() {
  for f in include lib bin; do
    ! [[ -d "$_sysroot/usr/$f" ]] \
      && mkdir -p "$_sysroot/usr/$f"
    ! [[ -h "$_sysroot/$f" ]] \
      && ln -sfr "$_sysroot/usr/$f" "$_sysroot/$f"
  done

  # ensure we use sane environment
  unset AR
  unset AS
  unset CC
  unset CPP
  unset CXX
  unset LD
  unset NM
  unset OBJDUMP
  unset RANLIB
  unset READELF
  unset CFLAGS
  unset CPPFLAGS
  unset CXXFLAGS
  unset LDFLAGS
  export CFLAGS="-Os"
  export CXXFLAGS="-Os"

  _binutils_build
  _gcc_bootstrap
  _linux_headers
  _glibc_headers
  _glibc_build
  _gcc_build
}

do_install() {
  for f in include lib bin; do
    ! [[ -d "$DESTDIR/$_sysroot/usr/$f" ]] \
      && mkdir -p "$DESTDIR/$_sysroot/usr/$f"
    ! [[ -h "$DESTDIR/$_sysroot/$f" ]] \
      && ln -sfr "$DESTDIR/$_sysroot/usr/$f" "$DESTDIR/$_sysroot/$f"
  done

  # install cross binutils
  cd "$wrksrc/binutils-build"
  make DESTDIR="$DESTDIR" install

  # install cross gcc
  cd "$wrksrc/gcc-build"
  make DESTDIR="$DESTDIR" install

  # move libcc1.so* to the sysroot
  mv "$DESTDIR/usr/lib"/libcc1.so* "$DESTDIR/$_sysroot/usr/lib"

  # install linux API headers for MIPS
  cd "$wrksrc/linux-$_linux_version"
  make ARCH="arm" INSTALL_HDR_PATH="$DESTDIR/$_sysroot/usr" headers_install
  rm -f $(find "$DESTDIR/$_sysroot/usr/include" -name .install -or -name ..install.cmd)
  rm -rf "$DESTDIR/$_sysroot/usr/include/drm"

  # install glibc for target
  cd "$wrksrc/glibc-build"
  make install_root="$DESTDIR/$_sysroot" install install-headers

  # remove unnecessary stuff
  rm -f "$DESTDIR/usr"/lib*/libiberty.a
  rm -rf "$DESTDIR/usr/share"
  rm -rf "$DESTDIR/$_sysroot"/{sbin,lib,etc,var}
  rm -rf "$DESTDIR/$_sysroot/usr"/{sbin,share,libexec}
  rm -rf "$DESTDIR/$_sysroot/usr/lib/gconv"
  rm -f "$DESTDIR/$_sysroot/libexec"
}

cross-arm-linux-gnueabi-libc_package() {
  short_desc+=" - glibc files"
  nostrip="yes"
  noshlibprovides="yes"
  noverifyrdeps="yes"

  pkg_install() {
    vmove "$_sysroot"
  }
}

# vim: set filetype=sh foldmethod=marker foldlevel=0 nowrap:
