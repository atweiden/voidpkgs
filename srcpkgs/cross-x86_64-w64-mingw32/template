_binutils_version=2.29.1
_gcc_version=8.2.0
_gmp_version=6.1.2
_mpfr_version=4.0.1
_mpc_version=1.1.0
_isl_version=0.19
_mingw_version=5.0.4

maintainer="Andy Weidenbaum <archbaum@gmail.com>"
pkgname="cross-x86_64-w64-mingw32"
version=$_mingw_version
revision=4
short_desc="Cross toolchain for Win64 (GCC $_gcc_version)"
only_for_archs+=" i686"
only_for_archs+=" x86_64"
# it's ok to build with current's -devel packages
# although it might break the package during compiler updates
#makedepends="zlib-devel gmp-devel mpfr-devel libmpc-devel isl15-devel"
makedepends="zlib-devel"
hostmakedepends+=" flex"
hostmakedepends+=" perl"
homepage="https://sourceforge.net/projects/mingw-w64/"
license="GPL-2.0-or-later, GPL-3.0-or-later, ZPL-2.1"
distfiles+=" $GNU_SITE/binutils/binutils-$_binutils_version.tar.bz2"
distfiles+=" $GNU_SITE/gcc/gcc-$_gcc_version/gcc-$_gcc_version.tar.xz"
distfiles+=" $GNU_SITE/mpc/mpc-$_mpc_version.tar.gz"
distfiles+=" https://gmplib.org/download/gmp/gmp-$_gmp_version.tar.xz"
distfiles+=" http://www.mpfr.org/mpfr-$_mpfr_version/mpfr-$_mpfr_version.tar.xz"
distfiles+=" http://isl.gforge.inria.fr/isl-$_isl_version.tar.bz2"
distfiles+=" $SOURCEFORGE_SITE/project/mingw-w64/mingw-w64/mingw-w64-release/mingw-w64-v$_mingw_version.tar.bz2"
checksum+=" 1509dff41369fb70aed23682351b663b56db894034773e6dbf7d5d6071fc55cc"
checksum+=" 196c3c04ba2613f893283977e6011b2345d1cd1af9abeac58e916b1aab3e0080"
checksum+=" 6985c538143c1208dcb1ac42cedad6ff52e267b47e5f970183a3e75125b43c2e"
checksum+=" 87b565e89a9a684fe4ebeeddb8399dce2599f9c9049854ca8c0dfbdea0e21912"
checksum+=" 67874a60826303ee2fb6affc6dc0ddd3e749e9bfcb4c8655e3953d0458a6e16e"
checksum+=" d59726f34f7852a081fbd3defd1ab2136f174110fc2e0c8d10bb122173fa9ed8"
checksum+=" 5527e1f6496841e2bb72f97a184fc79affdcd37972eaa9ebf7a5fd05c31ff803"
create_wrksrc="yes"
nostrip="yes"
nopie="yes"
nodebug="yes"

# https://sourceforge.net/p/mingw-w64/wiki2/Cross%20Win32%20and%20Win64%20compiler/
# https://gcc.gnu.org/install/configure.html
# http://mingw-w64.org/doku.php/configure

_binutils_build() {
  local _target
  _target="$1"
  _sysroot="/usr/$_target"
  _builddir="$wrksrc/build-binutils-$_target"

  msg_normal "Building binutils: $_target\n"

  mkdir -p "$_builddir" && cd "$_builddir"

  "../binutils-$_binutils_version/configure" \
    --disable-multilib \
    --disable-nls \
    --disable-shared \
    --disable-werror \
    --enable-lto \
    --prefix="/usr" \
    --target="$_target" \
    --with-sysroot="$_sysroot" \
    --with-system-zlib

  make && make install
}

_mingw_headers() {
  local _target
  _target="$1"
  _sysroot="/usr/$_target"
  _builddir="$wrksrc/build-mingw-headers-$_target"

  msg_normal "Building MinGW headers: $_target\n"

  mkdir -p "$_builddir" && cd "$_builddir"

  "../mingw-w64-v$_mingw_version/mingw-w64-headers/configure" \
    --disable-werror \
    --enable-sdk=all \
    --enable-secure-api \
    --host="$_target" \
    --prefix="$_sysroot"

  make && make install

  # manually create required symlinks
  (cd "$_sysroot" && ln -sfT "." "mingw")
  (cd "$_sysroot" && ln -sf "lib" "lib64")
}

_gcc_bootstrap() {
  local _target
  _target="$1"
  _sysroot="/usr/$_target"
  _builddir="$wrksrc/build-gcc-$_target"

  msg_normal "Building GCC bootsrap: $_target\n"

  # not needed when using current's -devel packages
  ln -sf "$wrksrc/gmp-$_gmp_version" "$wrksrc/gcc-$_gcc_version/gmp"
  ln -sf "$wrksrc/mpc-$_mpc_version" "$wrksrc/gcc-$_gcc_version/mpc"
  ln -sf "$wrksrc/mpfr-$_mpfr_version" "$wrksrc/gcc-$_gcc_version/mpfr"
  ln -sf "$wrksrc/isl-$_isl_version" "$wrksrc/gcc-$_gcc_version/isl"

  mkdir -p "$_builddir" && cd "$_builddir"

  "../gcc-$_gcc_version/configure" \
    --disable-gcov \
    --disable-libcc1 \
    --disable-multilib \
    --disable-nls \
    --disable-werror \
    --enable-languages=c,c++,lto \
    --enable-lto \
    --enable-shared \
    --enable-static \
    --enable-threads=posix \
    --prefix="/usr" \
    --target="$_target" \
    --with-sysroot="$_sysroot" \
    --with-system-zlib

  make all-gcc && make install-gcc
}

_mingw_crt_build() {
  local _target
  _target="$1"
  _sysroot="/usr/$_target"
  _builddir="$wrksrc/build-mingw-crt-$_target"

  msg_normal "Building MinGW CRT: $_target\n"

  if [[ $_target == "i686-w64-mingw32" ]]; then
    _crt_configure_args="--disable-lib64 --enable-lib32"
  elif [[ $_target == "x86_64-w64-mingw32" ]]; then
    _crt_configure_args="--disable-lib32 --enable-lib64"
  fi

  mkdir -p "$_builddir" && cd "$_builddir"

  AR="$_target-ar" \
  AS="$_target-as" \
  CC="$_target-gcc" \
  CPP="$_target-gcc -E" \
  OBJDUMP="$_target-objdump" \
  RANLIB="$_target-ranlib" \
  STRIP="$_target-strip" \
  WINDRES="$_target-windres" \
  "../mingw-w64-v$_mingw_version/mingw-w64-crt/configure" \
    --host="$_target" \
    --prefix="$_sysroot" \
    $_crt_configure_args

  make && make install
}

_mingw_winpthreads_build() {
  local _target
  _target="$1"
  _sysroot="/usr/$_target"
  _builddir="$wrksrc/build-mingw-winpthreads-$_target"

  msg_normal "Building MinGW winpthreads: $_target\n"

  mkdir -p "$_builddir" && cd "$_builddir"

  AR="$_target-ar" \
  AS="$_target-as" \
  CC="$_target-gcc" \
  CPP="$_target-gcc -E" \
  OBJDUMP="$_target-objdump" \
  RANLIB="$_target-ranlib" \
  STRIP="$_target-strip" \
  WINDRES="$_target-windres" \
  "../mingw-w64-v$_mingw_version/mingw-w64-libraries/winpthreads/configure" \
    --enable-shared \
    --enable-static \
    --host="$_target" \
    --prefix="$_sysroot"

  make && make install
}

_gcc_build() {
  local _target
  _target="$1"
  _sysroot="/usr/$_target"
  _builddir="$wrksrc/build-gcc-$_target"

  msg_normal "Building GCC: $_target\n"

  cd "$_builddir"

  # should be already configured previously
  # no need for install since this is the last step
  make
}

_build_cross() {
  local _target
  _target="$1"

  (_binutils_build "$_target")
  (_mingw_headers "$_target")
  (_gcc_bootstrap "$_target")
  (_mingw_crt_build "$_target")
  (_mingw_winpthreads_build "$_target")
  (_gcc_build "$_target")
}

do_build() {
  (_build_cross "x86_64-w64-mingw32")
  (_build_cross "i686-w64-mingw32")
}

_install_cross() {
  local _target
  _target="$1"

  (cd "$wrksrc/build-binutils-$_target" && DESTDIR="$DESTDIR" make install)
  (cd "$wrksrc/build-gcc-$_target" && DESTDIR="$DESTDIR" make install)
  (cd "$wrksrc/build-mingw-headers-$_target" && DESTDIR="$DESTDIR" make install)
  (cd "$wrksrc/build-mingw-crt-$_target" && DESTDIR="$DESTDIR" make install)
  (cd "$wrksrc/build-mingw-winpthreads-$_target" && DESTDIR="$DESTDIR" make install)

  # remove unnecessary stuff
  rm -rf "$DESTDIR/usr/share/"
  rm -rf "$DESTDIR/usr/lib"/libcc1*
}

do_install() {
  # i686 version will be installed in subpackage (below)
  _install_cross "x86_64-w64-mingw32"
}

_clean_cross() {
  local _target
  _target="$1"

  rm -rf "/usr/$_target"
  rm -f  "/usr/bin"/$_target*
  rm -rf "/usr/lib/gcc/$_target"
  rm -rf "/usr/libexec/gcc/$_target"
}

do_clean() {
  _clean_cross "x86_64-w64-mingw32"
  _clean_cross "i686-w64-mingw32"
}

cross-i686-w64-mingw32_package() {
  short_desc="Cross toolchain for Win32 (GCC $_gcc_version)"
  nostrip="yes"
  nopie="yes"
  nodebug="yes"

  pkg_install() {
    DESTDIR="$PKGDESTDIR" _install_cross "i686-w64-mingw32"
  }
}

# vim: set filetype=sh foldmethod=marker foldlevel=0 nowrap:
