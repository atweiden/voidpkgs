_binutils_version=2.32
_gcc_version=9.2.0
_gmp_version=6.1.2
_mpfr_version=4.0.1
_mpc_version=1.1.0
_isl_version=0.19
_mingw_version=6.0.0

maintainer="nox"
pkgname="cross-x86_64-w64-mingw32"
version=$_mingw_version
revision=3
short_desc="Cross toolchain for Win64 (GCC $_gcc_version)"
archs+=" i686*"
archs+=" x86_64*"
depends="$pkgname-crt-${version}_$revision"
# it's ok to build with current's -devel packages
# although it might break the package during compiler updates
#makedepends="zlib-devel gmp-devel mpfr-devel libmpc-devel isl15-devel"
makedepends="zlib-devel"
hostmakedepends+=" flex"
hostmakedepends+=" perl"
hostmakedepends+=" python3"
homepage="https://sourceforge.net/projects/mingw-w64/"
license="GPL-2.0-or-later, GPL-3.0-or-later, ZPL-2.1"
distfiles+=" $GNU_SITE/binutils/binutils-$_binutils_version.tar.bz2"
distfiles+=" $GNU_SITE/gcc/gcc-$_gcc_version/gcc-$_gcc_version.tar.xz"
distfiles+=" $GNU_SITE/mpc/mpc-$_mpc_version.tar.gz"
distfiles+=" https://gmplib.org/download/gmp/gmp-$_gmp_version.tar.xz"
distfiles+=" http://www.mpfr.org/mpfr-$_mpfr_version/mpfr-$_mpfr_version.tar.xz"
distfiles+=" http://isl.gforge.inria.fr/isl-$_isl_version.tar.bz2"
distfiles+=" $SOURCEFORGE_SITE/project/mingw-w64/mingw-w64/mingw-w64-release/mingw-w64-v$_mingw_version.tar.bz2"
checksum+=" de38b15c902eb2725eac6af21183a5f34ea4634cb0bcef19612b50e5ed31072d"
checksum+=" ea6ef08f121239da5695f76c9b33637a118dcf63e24164422231917fa61fb206"
checksum+=" 6985c538143c1208dcb1ac42cedad6ff52e267b47e5f970183a3e75125b43c2e"
checksum+=" 87b565e89a9a684fe4ebeeddb8399dce2599f9c9049854ca8c0dfbdea0e21912"
checksum+=" 67874a60826303ee2fb6affc6dc0ddd3e749e9bfcb4c8655e3953d0458a6e16e"
checksum+=" d59726f34f7852a081fbd3defd1ab2136f174110fc2e0c8d10bb122173fa9ed8"
checksum+=" 805e11101e26d7897fce7d49cbb140d7bac15f3e085a91e0001e80b2adaf48f0"
create_wrksrc="yes"
nopie="yes"
nodebug="yes"
noverifyrdeps="yes"
noshlibprovides="yes"
# disable build of 32bits packages
lib32disabled="yes"
nostrip_files+=" libatomic.a"
nostrip_files+=" libatomic.dll.a"
nostrip_files+=" libgcc.a"
nostrip_files+=" libgcc_eh.a"
nostrip_files+=" libgcc_s.a"
nostrip_files+=" libgcov.a"
nostrip_files+=" libquadmath.a"
nostrip_files+=" libquadmath.dll.a"
nostrip_files+=" libssp.a"
nostrip_files+=" libssp.dll.a"
nostrip_files+=" libssp_nonshared.a"
nostrip_files+=" libstdc++.a"
nostrip_files+=" libstdc++.dll.a"
nostrip_files+=" libsupc++.a"

# https://sourceforge.net/p/mingw-w64/wiki2/Cross%20Win32%20and%20Win64%20compiler/
# https://gcc.gnu.org/install/configure.html
# http://mingw-w64.org/doku.php/configure

_binutils_build() {
  local _builddir
  local _sysroot
  local _target
  _target="$1"
  _sysroot="/usr/$_target"
  _builddir="$wrksrc/build-binutils-$_target"

  msg_normal "Building binutils: $_target\n"

  mkdir -p "$_builddir" && cd "$_builddir"

  "../binutils-$_binutils_version/configure" \
    --prefix="/usr" \
    --with-sysroot="$_sysroot" \
    --target="$_target" \
    --disable-multilib \
    --disable-shared \
    --disable-nls \
    --disable-werror \
    --enable-lto \
    --with-system-zlib

  make "$makejobs" && make install
}

_mingw_headers() {
  local _builddir
  local _sysroot
  local _target
  _target="$1"
  _sysroot="/usr/$_target"
  _builddir="$wrksrc/build-mingw-headers-$_target"

  msg_normal "Building MinGW headers: $_target\n"

  mkdir -p "$_builddir" && cd "$_builddir"

  "../mingw-w64-v$_mingw_version/mingw-w64-headers/configure" \
    --disable-werror \
    --enable-sdk="all" \
    --enable-secure-api \
    --host="$_target" \
    --prefix="$_sysroot"

  make "$makejobs" && make install

  # manually create required symlinks
  (cd "$_sysroot" && ln -sfT "." "mingw")
  (cd "$_sysroot" && ln -sf "lib" "lib64")
}

_gcc_bootstrap() {
  local _builddir
  local _sysroot
  local _target
  _target="$1"
  _sysroot="/usr/$_target"
  _builddir="$wrksrc/build-gcc-$_target"

  msg_normal "Building GCC bootsrap: $_target\n"

  # not needed when using current's -devel packages
  ln -sf "$wrksrc/gmp-$_gmp_version" "$wrksrc/gcc-$_gcc_version/gmp"
  ln -sf "$wrksrc/mpc-$_mpc_version" "$wrksrc/gcc-$_gcc_version/mpc"
  ln -sf "$wrksrc/mpfr-$_mpfr_version" "$wrksrc/gcc-$_gcc_version/mpfr"
  ln -sf "$wrksrc/isl-$_isl_version" "$wrksrc/gcc-$_gcc_version/isl"

  mkdir -p "$_builddir" && cd "$_builddir"

  "../gcc-$_gcc_version/configure" \
    --disable-gcov \
    --disable-libcc1 \
    --disable-multilib \
    --disable-nls \
    --disable-werror \
    --enable-languages="c,c++,lto" \
    --enable-lto \
    --enable-shared \
    --enable-static \
    --enable-threads="posix" \
    --prefix="/usr" \
    --target="$_target" \
    --with-sysroot="$_sysroot" \
    --with-system-zlib

  make "$makejobs" all-gcc && make install-gcc
}

_mingw_crt_build() {
  local _builddir
  local _sysroot
  local _target
  _target="$1"
  _sysroot="/usr/$_target"
  _builddir="$wrksrc/build-mingw-crt-$_target"

  msg_normal "Building MinGW CRT: $_target\n"

  if [[ "$_target" == "i686-w64-mingw32" ]]; then
    _crt_configure_args="--disable-lib64 --enable-lib32"
  elif [[ "$_target" == "x86_64-w64-mingw32" ]]; then
    _crt_configure_args="--disable-lib32 --enable-lib64"
  fi

  mkdir -p "$_builddir" && cd "$_builddir"

  AR="$_target-ar" \
  AS="$_target-as" \
  CC="$_target-gcc" \
  CPP="$_target-gcc -E" \
  OBJDUMP="$_target-objdump" \
  RANLIB="$_target-ranlib" \
  STRIP="$_target-strip" \
  WINDRES="$_target-windres" \
  "../mingw-w64-v$_mingw_version/mingw-w64-crt/configure" \
    --host="$_target" \
    --prefix="$_sysroot" \
    $_crt_configure_args

  make "$makejobs" && make install
}

_mingw_winpthreads_build() {
  local _builddir
  local _sysroot
  local _target
  _target="$1"
  _sysroot="/usr/$_target"
  _builddir="$wrksrc/build-mingw-winpthreads-$_target"

  msg_normal "Building MinGW winpthreads: $_target\n"

  mkdir -p "$_builddir" && cd "$_builddir"

  AR="$_target-ar" \
  AS="$_target-as" \
  CC="$_target-gcc" \
  CPP="$_target-gcc -E" \
  OBJDUMP="$_target-objdump" \
  RANLIB="$_target-ranlib" \
  STRIP="$_target-strip" \
  WINDRES="$_target-windres" \
  "../mingw-w64-v$_mingw_version/mingw-w64-libraries/winpthreads/configure" \
    --enable-shared \
    --enable-static \
    --host="$_target" \
    --prefix="$_sysroot"

  make "$makejobs" && make install
}

_gcc_build() {
  local _builddir
  local _sysroot
  local _target
  _target="$1"
  _sysroot="/usr/$_target"
  _builddir="$wrksrc/build-gcc-$_target"

  msg_normal "Building GCC: $_target\n"

  cd "$_builddir"

  # should be already configured previously
  # no need for install since this is the last step
  make "$makejobs"
}

_build_cross() {
  # ensure we use sane environment
  unset AR
  unset AS
  unset CC
  unset CFLAGS
  unset CPP
  unset CPPFLAGS
  unset CXX
  unset CXXFLAGS
  unset LD
  unset LDFLAGS
  unset NM
  unset OBJDUMP
  unset OBJDUMP
  unset RANLIB
  unset READELF
  unset STRIP
  unset WINDRES

  _target="$1"

  (_binutils_build "$_target")
  (_mingw_headers "$_target")
  (_gcc_bootstrap "$_target")
  (_mingw_crt_build "$_target")
  (_mingw_winpthreads_build "$_target")
  (_gcc_build "$_target")
}

do_build() {
  (_build_cross "x86_64-w64-mingw32")
  (_build_cross "i686-w64-mingw32")
}

_install_toolchain() {
  local _target
  _target="$1"

  (cd "$wrksrc/build-binutils-$_target" && DESTDIR="$DESTDIR" make install)
  (cd "$wrksrc/build-gcc-$_target" && DESTDIR="$DESTDIR" make install)

  # remove unnecessary stuff
  rm -rf "$DESTDIR/usr/share/"
  rm -rf "$DESTDIR/usr/lib"/libcc1*
}

_install_crt() {
  local _target
  _target="$1"

  (cd "$wrksrc/build-mingw-headers-$_target" && DESTDIR="$DESTDIR" make install)
  (cd "$wrksrc/build-mingw-crt-$_target" && DESTDIR="$DESTDIR" make install)
  (cd "$wrksrc/build-mingw-winpthreads-$_target" && DESTDIR="$DESTDIR" make install)
}

do_install() {
  (_install_toolchain "x86_64-w64-mingw32")
  # i686 version will be installed in subpackage (below)
}

_clean_cross() {
  local _target
  _target="$1"

  rm -rf "/usr/$_target"
  rm -f  "/usr/bin"/$_target*
  rm -rf "/usr/lib/gcc/$_target"
  rm -rf "/usr/libexec/gcc/$_target"
}

do_clean() {
  (_clean_cross "x86_64-w64-mingw32")
  (_clean_cross "i686-w64-mingw32")
}

cross-x86_64-w64-mingw32-crt_package() {
  short_desc="CRT for Win64 cross toolchain"
  nopie="yes"
  nodebug="yes"
  # this subpackage exists to skip strip step on CRT files
  nostrip="yes"
  noverifyrdeps="yes"
  noshlibsprovides="yes"
  lib32disabled="yes"
  pkg_install() {
    DESTDIR="$PKGDESTDIR" _install_crt "x86_64-w64-mingw32"
  }
}

cross-i686-w64-mingw32_package() {
  unset nostrip_files
  short_desc="Cross toolchain for Win32 (GCC $_gcc_version)"
  depends="$pkgname-crt-${version}_$revision"
  nopie="yes"
  nodebug="yes"
  noverifyrdeps="yes"
  noshlibsprovides="yes"
  lib32disabled="yes"
  nostrip_files+=" libatomic.a"
  nostrip_files+=" libatomic.dll.a"
  nostrip_files+=" libgcc.a"
  nostrip_files+=" libgcc_eh.a"
  nostrip_files+=" libgcc_s.a"
  nostrip_files+=" libgcov.a"
  nostrip_files+=" libquadmath.a"
  nostrip_files+=" libquadmath.dll.a"
  nostrip_files+=" libssp.a"
  nostrip_files+=" libssp.dll.a"
  nostrip_files+=" libssp_nonshared.a"
  nostrip_files+=" libstdc++.a"
  nostrip_files+=" libstdc++.dll.a"
  nostrip_files+=" libsupc++.a"
  pkg_install() {
    DESTDIR="$PKGDESTDIR" _install_toolchain "i686-w64-mingw32"
  }
}

cross-i686-w64-mingw32-crt_package() {
  short_desc="CRT for Win32 cross toolchain"
  nopie="yes"
  nodebug="yes"
  nostrip="yes"
  noverifyrdeps="yes"
  noshlibsprovides="yes"
  lib32disabled="yes"
  pkg_install() {
    DESTDIR="$PKGDESTDIR" _install_crt "i686-w64-mingw32"
  }
}

# vim: set filetype=sh foldmethod=marker foldlevel=0 nowrap:
