_binutils_version=2.31.1
_gcc_version=8.2.0
_musl_version=1.1.20
_linux_version=4.19

_triplet="i686-linux-musl"
_sysroot="/usr/$_triplet"
_archflags="-march=i686"

maintainer="Andy Weidenbaum <archbaum@gmail.com>"
pkgname="cross-$_triplet"
version=0.29
revision=2
short_desc="Cross toolchain for i686 target (musl)"
depends="$pkgname-libc-${version}_$revision"
makedepends+=" gmp-devel"
makedepends+=" isl15-devel"
makedepends+=" libmpc-devel"
makedepends+=" mpfr-devel"
makedepends+=" zlib-devel"
hostmakedepends+=" flex"
hostmakedepends+=" gcc-ada"
hostmakedepends+=" libada-devel"
hostmakedepends+=" perl"
only_for_archs+=" i686"
only_for_archs+=" x86_64"
only_for_archs+=" x86_64-musl"
homepage="https://www.voidlinux.org/"
license="GPL-2.0-or-later, GPL-3.0-or-later, MIT"
distfiles+=" $GNU_SITE/binutils/binutils-$_binutils_version.tar.xz"
distfiles+=" $GNU_SITE/gcc/gcc-$_gcc_version/gcc-$_gcc_version.tar.xz"
distfiles+=" http://www.musl-libc.org/releases/musl-$_musl_version.tar.gz"
distfiles+=" $KERNEL_SITE/kernel/v4.x/linux-$_linux_version.tar.xz"
checksum+=" 5d20086ecf5752cc7d9134246e9588fa201740d540f7eb84d795b1f7a93bca86"
checksum+=" 196c3c04ba2613f893283977e6011b2345d1cd1af9abeac58e916b1aab3e0080"
checksum+=" 44be8771d0e6c6b5f82dd15662eb2957c9a3173a19a8b49966ac0542bbd40d61"
checksum+=" 0c68f5655528aed4f99dae71a5b259edc93239fa899e2df79c055275c21749a1"
create_wrksrc="yes"
lib32disabled="yes"
nocross="yes"
nopie="yes"
nodebug="yes"
nostrip_files+=" libcaf_single.a"
nostrip_files+=" libgcc.a"
nostrip_files+=" libgcc_eh.a"
nostrip_files+=" libgcov.a"
nostrip_files+=" libgnarl.a"
nostrip_files+=" libgnarl_pic.a"
nostrip_files+=" libgnat.a"
nostrip_files+=" libgnat_pic.a"

_apply_patch() {
  local args="$1"
  local pname="$(basename $2)"
  if [[ ! -f ".${pname}_done" ]]; then
    patch -N "$args" -i "$2"
    touch ".${pname}_done"
  fi
}

_binutils_build() {
  local _args
  [[ -f "$wrksrc/.binutils_build_done" ]] \
    && return 0

  cd "$wrksrc"
  msg_normal "Building cross binutils bootstrap\n"

  ! [[ -d "binutils-build" ]] \
    && mkdir binutils-build
  cd binutils-build

  _args+=" $_fpuflags"
  _args+=" --disable-multilib"
  _args+=" --disable-nls"
  _args+=" --disable-shared"
  _args+=" --disable-werror"
  _args+=" --prefix=/usr"
  _args+=" --target=$_triplet"
  _args+=" --with-sysroot=$_sysroot"
  _args+=" --with-system-zlib"

  "../binutils-$_binutils_version/configure" $_args
  make configure-host
  make "$makejobs"
  make install
  touch "$wrksrc/.binutils_build_done"
}

_gcc_bootstrap() {
  local _args
  [[ -f "$wrksrc/.gcc_bootstrap_done" ]] \
    && return 0

  cd "$wrksrc/gcc-$_gcc_version"
  _apply_patch -p0 "$FILESDIR/fix-cxxflags-passing.patch"
  _apply_patch -p0 "$FILESDIR/no-stack_chk_fail_local.patch"
  _apply_patch -p0 "$FILESDIR/musl-ada.patch"
  _apply_patch -p1 "$FILESDIR/libgnarl-musl.patch"

  msg_normal "Building cross gcc bootstrap\n"

  ! [[ -d "../gcc-bootstrap" ]] \
    && mkdir ../gcc-bootstrap
  cd ../gcc-bootstrap

  _args+=" $_fpuflags"
  _args+=" --disable-decimal-float"
  _args+=" --disable-libatomic"
  _args+=" --disable-libgomp"
  _args+=" --disable-libmpx"
  _args+=" --disable-libmudflap"
  _args+=" --disable-libquadmath"
  _args+=" --disable-libssp"
  _args+=" --disable-nls"
  _args+=" --disable-shared"
  _args+=" --disable-symvers"
  _args+=" --disable-threads"
  _args+=" --enable-languages=c"
  _args+=" --prefix=/usr"
  _args+=" --target=$_triplet"
  _args+=" --with-newlib"
  _args+=" --with-sysroot=$_sysroot"
  _args+=" libat_cv_have_ifunc=no"

  CFLAGS="-O0 -g0" \
  CXXFLAGS="-O0 -g0" \
    "../gcc-$_gcc_version/configure" $_args

  make "$makejobs"
  make install
  touch "$wrksrc/.gcc_bootstrap_done"
}

_linux_headers() {
  [[ -f "$wrksrc/.linux_build_done" ]] \
    && return 0

  cd "$wrksrc"
  msg_normal "Building Linux API headers\n"

  cd "linux-$_linux_version"

  for f in "$XBPS_SRCPKGDIR/kernel-libc-headers/patches"/*.patch; do
    _apply_patch -p0 "$f"
  done

  make ARCH="x86" headers_check
  make ARCH="x86" INSTALL_HDR_PATH="$_sysroot/usr" headers_install
  touch "$wrksrc/.linux_build_done"
}

_musl_build() {
  [[ -f "$wrksrc/.musl_build_done" ]] \
    && return 0

  cd "$wrksrc/musl-$_musl_version"
  msg_normal "Building cross musl libc\n"

  CC="$_triplet-gcc" \
  CFLAGS="-Os -pipe $_archflags" \
    ./configure --prefix="/usr"

  make "$makejobs"
  make DESTDIR="$_sysroot" install
  touch "$wrksrc/.musl_build_done"
}

_gcc_build() {
  local _args
  [[ -f "$wrksrc/.gcc_build_done" ]] \
    && return 0

  cd "$wrksrc"
  msg_normal "Building cross gcc final\n"

  ! [[ -d "gcc-build" ]] \
    && mkdir gcc-build
  cd gcc-build

  _args+=" $_fpuflags"
  _args+=" --disable-libmpx"
  _args+=" --disable-libmudflap"
  _args+=" --disable-libsanitizer"
  _args+=" --disable-multilib"
  _args+=" --disable-symvers"
  _args+=" --enable-default-pie"
  _args+=" --enable-default-ssp"
  _args+=" --enable-languages=c,ada,c++,fortran,lto"
  _args+=" --enable-libada"
  _args+=" --enable-libquadmath"
  _args+=" --enable-lto"
  _args+=" --enable-shared"
  _args+=" --prefix=/usr"
  _args+=" --target=$_triplet"
  _args+=" --with-sysroot=$_sysroot"
  _args+=" libat_cv_have_ifunc=no"

  "../gcc-$_gcc_version/configure" $_args
  make "$makejobs"
  touch "$wrksrc/.gcc_build_done"
}

do_build() {
  # ensure we use sane environment
  unset AR
  unset AS
  unset CC
  unset CFLAGS
  unset CPP
  unset CPPFLAGS
  unset CXX
  unset CXXFLAGS
  unset LD
  unset LDFLAGS
  unset NM
  unset OBJDUMP
  unset RANLIB
  unset READELF
  export CFLAGS="-Os -pipe"
  export CXXFLAGS="-Os -pipe"

  for f in include lib libexec bin sbin; do
    ! [[ -d "$_sysroot/usr/$f" ]] \
      && mkdir -p "$_sysroot/usr/$f"
    ! [[ -h "$_sysroot/$f" ]] \
      && ln -sfr "$_sysroot/usr/$f" "$_sysroot/$f"
  done

  _binutils_build
  _gcc_bootstrap
  _linux_headers
  _musl_build
  _gcc_build
}

do_install() {
  for f in include lib libexec bin sbin; do
    ! [[ -d "$DESTDIR/$_sysroot/usr/$f" ]] \
      && mkdir -p "$DESTDIR/$_sysroot/usr/$f"
    ! [[ -h "$DESTDIR/$_sysroot/$f" ]] \
      && ln -sfr "$DESTDIR/$_sysroot/usr/$f" "$DESTDIR/$_sysroot/$f"
  done

  # install linux API headers for x86
  cd "$wrksrc/linux-$_linux_version"
  make ARCH="x86" INSTALL_HDR_PATH="$DESTDIR/$_sysroot/usr" headers_install
  rm -f $(find "$DESTDIR/$_sysroot/usr/include" -name .install -or -name ..install.cmd)
  rm -rf "$DESTDIR/$_sysroot/usr/include/drm"

  # install cross binutils
  cd "$wrksrc/binutils-build"
  make DESTDIR="$DESTDIR" install

  # install cross gcc
  cd "$wrksrc/gcc-build"
  make DESTDIR="$DESTDIR" install

  # move libcc1.so* to the sysroot
  mv "$DESTDIR/usr/lib"/libcc1.so* "$DESTDIR/$_sysroot/usr/lib"

  # install musl libc for target
  cd "$wrksrc/musl-$_musl_version"
  make DESTDIR="$DESTDIR/$_sysroot" install

  # remove useless headers
  rm -rf "$DESTDIR/usr/lib/gcc/$_triplet"/*/include-fixed/

  # make ld-musl-i386.so.1 symlink relative to cwd
  cd "$DESTDIR/$_sysroot/usr/lib"
  ln -sf libc.so ld-musl-i386.so.1

  # move files to /usr/lib (lib64)
  if [[ -d "$DESTDIR/$_sysroot/usr/lib64" ]]; then
    mv "$DESTDIR/$_sysroot/usr/lib64"/* "$DESTDIR/$_sysroot/usr/lib/"
    rmdir "$DESTDIR/$_sysroot/usr/lib64"
  fi

  # symlinks for gnarl and gnat shared libraries
  _majorver="${_gcc_version%.*.*}"
  _adalib="usr/lib/gcc/$_triplet/$_gcc_version/adalib"
  mv -v "$DESTDIR/$_adalib/libgnarl-$_majorver.so" "$DESTDIR/$_sysroot/usr/lib"
  mv -v "$DESTDIR/$_adalib/libgnat-$_majorver.so" "$DESTDIR/$_sysroot/usr/lib"
  ln -svf "libgnarl-$_majorver.so" libgnarl.so
  ln -svf "libgnat-$_majorver.so" libgnat.so
  rm -vf "$DESTDIR/$_adalib"/libgna{rl,t}.so

  # remove unnecessary stuff
  rm -f "$DESTDIR/usr"/lib*/libiberty.a
  rm -rf "$DESTDIR/usr/share"
  rm -rf "$DESTDIR/$_sysroot"/{etc,var}
  rm -rf "$DESTDIR/$_sysroot/usr"/{sbin,share,libexec}
  rm -f "$DESTDIR/$_sysroot/libexec"
  rm -f "$DESTDIR/$_sysroot/lib"/*.py
  rm -f "$DESTDIR/$_sysroot"/{sbin,lib}
}

cross-i686-linux-musl-libc_package() {
  short_desc+=" - libc files"
  nostrip="yes"
  noverifyrdeps="yes"
  noshlibprovides="yes"
  pkg_install() {
    vmove "$_sysroot"
  }
}

# vim: set filetype=sh foldmethod=marker foldlevel=0 nowrap:
