maintainer="nox"
pkgname="chez-scheme"
version=9.5.6
revision=1
_nanopass_version=1.9.2
short_desc="Compiler and run-time system for R6RS Scheme"
archs+=" armv6l"
archs+=" armv7l"
archs+=" i686*"
archs+=" x86_64*"
makedepends+=" git"
makedepends+=" liblz4-devel"
makedepends+=" libuuid-devel"
makedepends+=" ncurses-devel"
makedepends+=" zlib-devel"
hostmakedepends="$makedepends"
homepage="http://scheme.com/"
license="Apache-2.0"
distfiles+=" https://github.com/cisco/ChezScheme/archive/v$version.tar.gz>$pkgname-$version.tar.gz"
distfiles+=" https://github.com/nanopass/nanopass-framework-scheme/archive/v$_nanopass_version.tar.gz"
checksum+=" e23c556493f9a661852ea046f3317500feac5f223ea6ef3aa3b9234567e14c0e"
checksum+=" 46d3ab75f425ef93a6ac31f0b0b2f893b9cb3154219832ad52ea044dd36b021c"
wrksrc="ChezScheme-$version"
build_style="gnu-configure"
configure_args="--disable-x11"
alternatives+=" scheme:scheme.1:/usr/share/man/man1/chez-scheme.1"
alternatives+=" scheme:scheme:/usr/bin/chez-scheme"

case "$XBPS_MACHINE" in
  i686*)
    _host="ti3le"
    ;;
  x86_64*)
    _host="ta6le"
    ;;
  arm*)
    # no threading makefile
    _host="arm32le"
    ;;
  *)
    broken="unsupported host platform"
    ;;
esac

case "$XBPS_TARGET_MACHINE" in
  i686*)
    _target="ti3le"
    ;;
  x86_64*)
    _target="ta6le"
    ;;
  arm*)
    _target="arm32le"
    ;;
  *)
    broken="unsupported target platform"
    ;;
esac

post_extract() {
  sed \
    -i \
    -e '/xlocale\.h/d' \
    c/expeditor.c

  # create a dummy git repo and hack out submodules - its presence stops
  # 'configure' from downloading its own versions of nanopass etc
  mkdir .git
  sed \
    -i \
    -e '/git submodule/s/^/: #/' \
    configure

  rmdir nanopass
  mv "../nanopass-framework-scheme-$_nanopass_version" nanopass
}

do_configure() {
  # configure such that scheme uses the zlib and lz4 system shared libs
  # ZLIB and LZ4 are used when building the scheme kernel and use the
  # full path
  # LDFLAGS is extended in 'do_build' so that the rest of the scheme
  # system links them
  ./configure \
    --installman="/usr/share/man" \
    --installprefix="/usr" \
    --installschemename="chez-scheme" \
    --machine="$_host" \
    --nogzip-man-pages \
    --temproot="$DESTDIR" \
    ZLIB="-L/usr/lib/libz.so" \
    LZ4="-L/usr/lib/liblz4.so"
}

post_install() {
  # make link relative
  ln -sf \
    scheme.boot \
    "$DESTDIR/usr/lib"/csv*/*/scheme-script.boot
}

if [[ -n "$CROSS_BUILD" ]]; then

do_build() {
  # build host/bootstrap scheme compiler
  make \
    "$makejobs" \
    CC="$BUILD_CC" \
    CFLAGS="$BUILD_CFLAGS" \
    LD="$BUILD_LD" \
    LDFLAGS="-lz -llz4 $BUILD_LDFLAGS"

  ./workarea "$_target"

  # use Mf-config created from 'do_configure'
  # this is required - the build fails to include the scheme kernel
  # when this is missing
  cd "$_target/c"
  ln -sf "../../$_host/c/Mf-config" .
  cd ..

  # cross compile to target
  make \
    "$makejobs" \
    -C s \
    -f Mf-cross \
    base="../../$_host" \
    m="$_host" \
    xm="$_target"

  make \
    "$makejobs" \
    -C c \
    CC="$CC" \
    CFLAGS="$CFLAGS" \
    LD="$LD" \
    LDFLAGS="-lz -llz4 $LDFLAGS"
}

do_install() {
  cd "$_target"
  make \
    -f "../$_host/Mf-install" \
    DESTDIR="$DESTDIR" \
    m="$_target"
}

else

do_build() {
  make \
    "$makejobs" \
    CC="$CC" \
    CFLAGS="$CFLAGS" \
    LD="$LD" \
    LDFLAGS="-lz -llz4 $LDFLAGS"
}

do_install() {
  make \
    DESTDIR="$DESTDIR" \
    install
}

fi

# vim: set filetype=sh foldmethod=marker foldlevel=0 nowrap:
