maintainer="nox"
pkgname="nodejs"
version=14.16.0
revision=1
short_desc="Evented I/O for V8 javascript"
# need these for host v8 for torque
# see: https://github.com/nodejs/node/pull/21079
makedepends+=" libatomic-devel"
makedepends+=" zlib-devel"
makedepends+=" $(vopt_if cares c-ares-devel)"
makedepends+=" $(vopt_if http_parser http-parser-devel)"
makedepends+=" $(vopt_if http_parser llhttp-devel)"
makedepends+=" $(vopt_if icu icu-devel)"
makedepends+=" $(vopt_if libuv libuv-devel)"
makedepends+=" $(vopt_if nghttp2 nghttp2-devel)"
makedepends+=" $(vopt_if ssl openssl-devel)"
checkdepends="procps-ng"
hostmakedepends+=" libatomic-devel"
hostmakedepends+=" pkg-config"
hostmakedepends+=" python3"
hostmakedepends+=" which"
hostmakedepends+=" zlib-devel"
hostmakedepends+=" $(vopt_if cares c-ares-devel)"
hostmakedepends+=" $(vopt_if http_parser http-parser-devel)"
hostmakedepends+=" $(vopt_if http_parser llhttp-devel)"
hostmakedepends+=" $(vopt_if icu icu-devel)"
hostmakedepends+=" $(vopt_if libuv libuv-devel)"
hostmakedepends+=" $(vopt_if nghttp2 nghttp2-devel)"
hostmakedepends+=" $(vopt_if ssl openssl-devel)"
homepage="https://nodejs.org/"
license="MIT"
distfiles="https://nodejs.org/dist/v$version/${pkgname%js}-v$version.tar.gz"
checksum="f6b904b06951de4c52089dd4456155d853e835b0dc4640f75458c6eb49f9e8ce"
wrksrc="${pkgname%js}-v$version"
python_version=3
build_options+=" cares"
build_options+=" http_parser"
build_options+=" icu"
build_options+=" libuv"
build_options+=" nghttp2"
build_options+=" ssl"
desc_option_ssl="Enable shared openssl"
desc_option_libuv="Enable shared libuv"
desc_option_http_parser="Enable shared http-parser and llhttp"
desc_option_icu="Enable shared icu"
desc_option_nghttp2="Enable shared nghttp2"
desc_option_cares="Enable shared c-ares"
build_options_default+=" cares"
build_options_default+=" http_parser"
build_options_default+=" icu"
build_options_default+=" libuv"
build_options_default+=" nghttp2"
build_options_default+=" ssl"
provides="nodejs-runtime-0_1"
conflicts+=" nodejs-lts"
conflicts+=" nodejs-lts-10"
replaces="iojs>=0"

# https://build.voidlinux.org/builders/i686_builder/builds/27325/steps/shell_3/logs/stdio
if [[ "$XBPS_WORDSIZE" == '32' ]]; then
  LDFLAGS="-Wl,--no-keep-memory"
fi

if [[ "$XBPS_WORDSIZE" -ne "$XBPS_TARGET_WORDSIZE" ]]; then
  nocross="host and target must have the same pointer size"
fi

case "$XBPS_TARGET_MACHINE" in
  ppc64*)
    ;;
  ppc*)
    broken="node 12.x does not support 32-bit ppc"
    ;;
esac

CFLAGS="-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"
CXXFLAGS="-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

do_configure() {
  local _args
  export LD="$CXX"
  if [[ -n "$CROSS_BUILD" ]]; then
    case "$XBPS_TARGET_MACHINE" in
      arm*)
        _args="--dest-cpu=arm"
        ;;
      aarch64*)
        _args="--dest-cpu=arm64"
        ;;
      ppc64*)
        _args="--dest-cpu=ppc64"
        ;;
      ppc*)
        _args="--dest-cpu=ppc"
        ;;
      mipsel*)
        _args="--dest-cpu=mipsel"
        ;;
      mips*)
        _args="--dest-cpu=mips"
        ;;
      i686*)
        _args="--dest-cpu=x86"
        ;;
      x86_64*)
        _args="--dest-cpu=x86_64"
        ;;
      *)
        msg_error "$pkgver: cannot be cross compiled for $XBPS_TARGET_MACHINE.\n"
        ;;
    esac
    # this is necessary - for example, normally compiling from ppc64le
    # to ppc64 or from glibc to musl is considered non-cross-compiling
    # by the build system, because it's technically the same architecture
    #
    # that results in the toolset built for target only, and attempting
    # to execute it within the build system fails
    _args+=" --cross-compiling"
  fi
  ./configure \
    $_args \
    --prefix="/usr" \
    --shared-zlib \
    $(vopt_if cares --shared-cares) \
    $(vopt_if http_parser --shared-http-parser) \
    $(vopt_if icu --with-intl=system-icu) \
    $(vopt_if libuv --shared-libuv) \
    $(vopt_if nghttp2 --shared-nghttp2) \
    $(vopt_if ssl --shared-openssl)
}

post_configure() {
  # fix linking against llhttp
  sed \
    -i \
    -e 's/-lhttp_parser/& -lllhttp/' \
    out/*.target.mk
}

do_build() {
  if [[ -n "$CROSS_BUILD" ]]; then
    make \
      "$makejobs" \
      LD="$CXX" \
      LDFLAGS+="-ldl" \
      PORTABLE=1 \
      V=1
  else
    make \
      "$makejobs"
      LD="$CXX" \
      LDFLAGS+="-ldl" \
      V=1
  fi
}

do_check() {
  make \
    LD="$CXX" \
    LDFLAGS+=-ldl \
    "$makejobs" \
    V=1 \
    test-only
}

do_install() {
  make \
    DESTDIR="$DESTDIR" \
    LD="$CXX" \
    LDFLAGS+="-ldl" \
    install
  rm -rf "$DESTDIR/usr/include/node/openssl"
  vlicense LICENSE
}

nodejs-devel_package() {
  unset conflicts
  short_desc+=" - development files"
  conflicts+=" nodejs-lts-devel"
  conflicts+=" nodejs-lts-10-devel"
  pkg_install() {
    vmove usr/include
  }
}

# vim: set filetype=sh foldmethod=marker foldlevel=0 nowrap:
