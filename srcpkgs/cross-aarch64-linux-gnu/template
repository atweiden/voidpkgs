_binutils_version=2.31.1
_gcc_version=8.2.0
_glibc_version=2.28
_linux_version=4.19

_triplet="aarch64-linux-gnu"
_archflags="-march=armv8-a"
_sysroot="/usr/$_triplet"

maintainer="Andy Weidenbaum <archbaum@gmail.com>"
pkgname="cross-$_triplet"
version=0.29
revision=1
short_desc="GNU Cross toolchain for the $_triplet LE target (binutils/gcc/glibc)"
only_for_archs="x86_64"
depends="$pkgname-libc-${version}_$revision"
makedepends+=" gmp-devel"
makedepends+=" isl15-devel"
makedepends+=" libmpc-devel"
makedepends+=" mpfr-devel"
makedepends+=" zlib-devel"
hostmakedepends+=" flex"
hostmakedepends+=" gcc-ada"
hostmakedepends+=" libada-devel"
hostmakedepends+=" perl"
homepage="https://www.voidlinux.org/"
license="GPL-2.0-or-later, GPL-3.0-or-later, LGPL-2.1-or-later"
distfiles+=" $GNU_SITE/binutils/binutils-$_binutils_version.tar.xz"
distfiles+=" $GNU_SITE/gcc/gcc-$_gcc_version/gcc-$_gcc_version.tar.xz"
distfiles+=" $GNU_SITE/glibc/glibc-$_glibc_version.tar.xz"
distfiles+=" $KERNEL_SITE/kernel/v4.x/linux-$_linux_version.tar.xz"
checksum+=" 5d20086ecf5752cc7d9134246e9588fa201740d540f7eb84d795b1f7a93bca86"
checksum+=" 196c3c04ba2613f893283977e6011b2345d1cd1af9abeac58e916b1aab3e0080"
checksum+=" b1900051afad76f7a4f73e71413df4826dce085ef8ddb785a945b66d7d513082"
checksum+=" 0c68f5655528aed4f99dae71a5b259edc93239fa899e2df79c055275c21749a1"
create_wrksrc="yes"
lib32disabled="yes"
nocross="yes"
nopie="yes"
nostrip_files+=" libcaf_single.a"
nostrip_files+=" libgcc.a"
nostrip_files+=" libgcc_eh.a"
nostrip_files+=" libgcov.a"
nostrip_files+=" libgnarl.a"
nostrip_files+=" libgnarl_pic.a"
nostrip_files+=" libgnat.a"
nostrip_files+=" libgnat_pic.a"

_apply_patch() {
  local args="$1"
  local pname="$(basename $2)"
  if ! [[ -f ".${pname}_done" ]]; then
    patch -N "$args" -i "$2"
    touch ".${pname}_done"
  fi
}

_linux_headers() {
  [[ -f "$wrksrc/.linux_build_done" ]] \
    && return 0
  cd "$wrksrc"
  msg_normal "Building Linux API headers for ARM\n"
  cd "linux-$_linux_version"
  make ARCH="arm64" headers_check
  make ARCH="arm64" INSTALL_HDR_PATH="$_sysroot/usr" headers_install
  touch "$wrksrc/.linux_build_done"
}

_binutils_build() {
  local _args
  [[ -f "$wrksrc/.binutils_build_done" ]] \
    && return 0

  cd "$wrksrc"
  msg_normal "Building cross binutils\n"
  ! [[ -d "binutils-build" ]] \
    && mkdir binutils-build
  cd binutils-build

  _args+=" --disable-gold"
  _args+=" --disable-multilib"
  _args+=" --disable-nls"
  _args+=" --disable-shared"
  _args+=" --disable-werror"
  _args+=" --prefix=/usr"
  _args+=" --target=$_triplet"
  _args+=" --with-sysroot=$_sysroot"
  _args+=" --with-system-zlib"

  "../binutils-$_binutils_version/configure" $_args
  make configure-host \
    && make "$makejobs"
  make install
  touch "$wrksrc/.binutils_build_done"
}

_gcc_bootstrap() {
  local _args
  [[ -f "$wrksrc/.gcc_bootstrap_done" ]] \
    && return 0

  cd "$wrksrc/gcc-$_gcc_version"
  _apply_patch -p0 "$FILESDIR/fix-cxxflags-passing.patch"

  msg_normal "Building cross gcc bootstrap\n"

  ! [[ -d "../gcc-bootstrap" ]] \
    && mkdir ../gcc-bootstrap
  cd ../gcc-bootstrap

  _args+=" --disable-decimal-float"
  _args+=" --disable-libatomic"
  _args+=" --disable-libgomp"
  _args+=" --disable-libitm"
  _args+=" --disable-libmpx"
  _args+=" --disable-libmudflap"
  _args+=" --disable-libquadmath"
  _args+=" --disable-libssp"
  _args+=" --disable-multilib"
  _args+=" --disable-nls"
  _args+=" --disable-shared"
  _args+=" --disable-sjlj-exceptions"
  _args+=" --disable-threads"
  _args+=" --enable-languages=c"
  _args+=" --prefix=/usr"
  _args+=" --target=$_triplet"
  _args+=" --with-gnu-as"
  _args+=" --with-gnu-ld"
  _args+=" --without-headers"

  "../gcc-$_gcc_version/configure" $_args
  make "$makejobs"
  make install
  touch "$wrksrc/.gcc_bootstrap_done"
}

_glibc_headers() {
  local _args
  local f
  [[ -f "$wrksrc/.glibc_headers_done" ]] \
    && return 0

  cd "$wrksrc/glibc-$_glibc_version"
  for f in "$XBPS_SRCPKGDIR/glibc/patches"/*.patch; do
    _apply_patch -p1 "$f"
  done

  cd "$wrksrc"
  msg_normal "Building cross glibc headers\n"

  ! [[ -d glibc-headers ]] \
    && mkdir glibc-headers
  cd glibc-headers

  echo "libc_cv_forced_unwind=yes" > config.cache
  echo "libc_cv_c_cleanup=yes" >> config.cache

  export AS="$_triplet-as"
  export CC="$_triplet-gcc"
  export CPP="$_triplet-cpp"
  export LD="$_triplet-ld"
  export NM="$_triplet-nm"

  _args+=" --config-cache"
  _args+=" --enable-kernel=2.6.27"
  _args+=" --enable-obsolete-nsl"
  _args+=" --enable-obsolete-rpc"
  _args+=" --host=$_triplet"
  _args+=" --prefix=/usr"
  _args+=" --with-headers=$_sysroot/usr/include"

  "../glibc-$_glibc_version/configure" $_args
  make -k install-headers cross_compiling="yes" install_root="$_sysroot"
  touch "$wrksrc/.glibc_headers_done"
}

_glibc_build() {
  local _args
  [[ -f "$wrksrc/.glibc_build_done" ]] \
    && return 0

  cd "$wrksrc"
  msg_normal "Building cross glibc\n"

  ! [[ -d glibc-build ]] \
    && mkdir glibc-build
  cd glibc-build

  echo "libc_cv_forced_unwind=yes" > config.cache
  echo "libc_cv_c_cleanup=yes" >> config.cache

  export AS="$_triplet-as"
  export CC="$_triplet-gcc"
  export CFLAGS="-Os -pipe -Wno-error $_archflags"
  export CPP="$_triplet-cpp"
  export LD="$_triplet-ld"
  export NM="$_triplet-nm"

  _args+=" --config-cache"
  _args+=" --disable-profile"
  _args+=" --enable-kernel=2.6.27"
  _args+=" --enable-obsolete-nsl"
  _args+=" --enable-obsolete-rpc"
  _args+=" --host=$_triplet"
  _args+=" --libdir=/usr/lib"
  _args+=" --prefix=/usr"
  _args+=" --with-headers=$_sysroot/usr/include"

  "../glibc-$_glibc_version/configure" $_args
  make "$makejobs"
  make install_root="$_sysroot" install
  touch "$wrksrc/.glibc_build_done"
}

_gcc_build() {
  local _args

  [[ -f "$wrksrc/.gcc_build_done" ]] \
    && return 0

  cd "$wrksrc"
  msg_normal "Building cross gcc final\n"

  ! [[ -d gcc-build ]] \
    && mkdir gcc-build
  cd gcc-build

  export CC="gcc"
  export CFLAGS="-Os -pipe"
  unset AS
  unset LD

  # make this link to target libs
  if ! [[ -f ".sed_subst_done" ]]; then
    sed \
      -i \
      -e "s, /lib/, $_sysroot/lib/,g;s, /usr/lib/, $_sysroot/usr/lib/,g" \
      "$_sysroot/lib/libc.so"
    sed \
      -i \
      -e "s, /lib64/, $_sysroot/lib64/,g;s, /usr/lib64/, $_sysroot/usr/lib64/,g" \
      "$_sysroot/lib/libc.so"
    touch .sed_subst_done
  fi

  _args+=" --disable-libatomic"
  _args+=" --disable-libcilkrts"
  _args+=" --disable-libitm"
  _args+=" --disable-libmudflap"
  _args+=" --disable-libquadmath"
  _args+=" --disable-libsanitizer"
  _args+=" --disable-libssp"
  _args+=" --disable-libstdcxx-pch"
  _args+=" --disable-libvtv"
  _args+=" --disable-multilib"
  _args+=" --disable-nls"
  _args+=" --disable-sjlj-exceptions"
  _args+=" --enable-default-pie"
  _args+=" --enable-default-ssp"
  _args+=" --enable-gnu-unique-object"
  _args+=" --enable-languages=c,ada,c++,fortran,lto"
  _args+=" --enable-libada"
  _args+=" --enable-libstdcxx-time"
  _args+=" --enable-linker-build-id"
  _args+=" --enable-long-longx"
  _args+=" --enable-lto"
  _args+=" --enable-shared"
  _args+=" --enable-threads=posix"
  _args+=" --libdir=/usr/lib"
  _args+=" --prefix=/usr"
  _args+=" --target=$_triplet"
  _args+=" --with-gnu-as"
  _args+=" --with-gnu-ld"
  _args+=" --with-linker-hash-style=gnu"
  _args+=" --with-sysroot=$_sysroot"

  "../gcc-$_gcc_version/configure" $_args
  make "$makejobs"
  touch "$wrksrc/.gcc_build_done"
}

do_build() {
  unset LDFLAGS
  export CFLAGS="-Os"
  export CXXFLAGS="-Os"

  for f in include lib libexec bin sbin; do
    ! [[ -d "$_sysroot/usr/$f" ]] \
      && mkdir -p "$_sysroot/usr/$f"
    ! [[ -h "$_sysroot/$f" ]] \
      && ln -sfr "$_sysroot/usr/$f" "$_sysroot/$f"
  done

  _binutils_build
  _gcc_bootstrap
  _linux_headers
  _glibc_headers
  _glibc_build
  _gcc_build
}

do_install() {
  for f in include libexec bin sbin; do
    ! [[ -d "$DESTDIR/$_sysroot/usr/$f" ]] \
      && mkdir -p "$DESTDIR/$_sysroot/usr/$f"
    ! [[ -h "$DESTDIR/$_sysroot/$f" ]] \
      && ln -sfr "$DESTDIR/$_sysroot/usr/$f" "$DESTDIR/$_sysroot/$f"
  done
  mkdir -p "$DESTDIR/$_sysroot/usr/lib"
  ln -sf lib "$DESTDIR/$_sysroot/usr/lib64"
  ln -sf usr/lib "$DESTDIR/$_sysroot/lib64"
  ln -sf usr/lib "$DESTDIR/$_sysroot/lib"

  # install cross binutils
  cd "$wrksrc/binutils-build"
  make DESTDIR="$DESTDIR" install

  # install cross gcc
  cd "$wrksrc/gcc-build"
  make DESTDIR="$DESTDIR" install

  # move libcc1.so* to the sysroot
  mv "$DESTDIR/usr/lib"/libcc1.so* "$DESTDIR/$_sysroot/usr/lib"

  # install linux API headers for arm64
  cd "$wrksrc/linux-$_linux_version"
  make ARCH="arm64" INSTALL_HDR_PATH="$DESTDIR/$_sysroot/usr" headers_install
  rm -f $(find "$DESTDIR/$_sysroot/usr/include" -name .install -or -name ..install.cmd)
  rm -rf "$DESTDIR/$_sysroot/usr/include/drm"

  # install glibc for target
  cd "$wrksrc/glibc-build"
  make install_root="$DESTDIR/$_sysroot" install install-headers

  # symlinks for gnarl and gnat shared libraries
  _majorver="${_gcc_version%.*.*}"
  _adalib="usr/lib/gcc/$_triplet/$_gcc_version/adalib"
  mv -v "$DESTDIR/$_adalib/libgnarl-$_majorver.so" "$DESTDIR/$_sysroot/usr/lib"
  mv -v "$DESTDIR/$_adalib/libgnat-$_majorver.so" "$DESTDIR/$_sysroot/usr/lib"
  ln -svf "libgnarl-$_majorver.so" libgnarl.so
  ln -svf "libgnat-$_majorver.so" libgnat.so
  rm -vf "$DESTDIR/$_adalib"/libgna{rl,t}.so

  # remove unnecessary stuff
  rm -f "$DESTDIR/usr"/lib*/libiberty.a
  rm -rf "$DESTDIR/usr/share"
  rm -rf "$DESTDIR/$_sysroot"/{sbin,etc,var}
  rm -rf "$DESTDIR/$_sysroot/usr"/{sbin,share,libexec}
  rm -rf "$DESTDIR/$_sysroot/usr/lib/gconv"
  rm -f "$DESTDIR/$_sysroot/libexec"
}

do_clean() {
  # remove temporary stuff from masterdir
  rm -rf "$_sysroot"
  rm -f "/usr/bin"/$_triplet*
  rm -rf "/usr/lib/gcc/$_triplet"
  rm -rf "/usr/libexec/gcc/$_triplet"
}

cross-aarch64-linux-gnu-libc_package() {
  short_desc+=" - glibc files"
  nostrip="yes"
  noshlibprovides="yes"
  noverifyrdeps="yes"

  pkg_install() {
    vmove "$_sysroot"
  }
}

# vim: set filetype=sh foldmethod=marker foldlevel=0 nowrap:
