maintainer="nox"
pkgname="grub"
version=2.04
revision=6
short_desc="GRand Unified Bootloader 2"
archs+=" aarch64*"
archs+=" i686*"
archs+=" ppc"
archs+=" ppc-musl"
archs+=" ppc64*"
archs+=" x86_64*"
depends="os-prober"
makedepends+=" device-mapper-devel"
makedepends+=" fuse-devel"
makedepends+=" liblzma-devel"
makedepends+=" libusb-compat-devel"
makedepends+=" ncurses-devel"
hostmakedepends+=" flex"
hostmakedepends+=" help2man"
hostmakedepends+=" pkg-config"
hostmakedepends+=" python3"
license="GPL-3.0-or-later"
homepage="https://www.gnu.org/software/grub/"
distfiles="$GNU_SITE/grub/$pkgname-$version.tar.xz"
checksum="e5292496995ad42dabe843a0192cf2a2c502e7ffcc7479398232b10a472df77d"
conf_files+=" /etc/default/grub"
conf_files+=" /etc/grub.d/*"
patch_args="-Np1"
nopie="yes"
subpackages="grub-utils"

# _SUPPLEMENTARY_BUILDS is a list of <TARGET>-<PLATFORM> versions of
# grub to build
case "$XBPS_TARGET_MACHINE" in
  x86_64*)
    _NATIVE_PLATFORM="pc"
    _SUPPLEMENTARY_BUILDS+=" i386-coreboot"
    _SUPPLEMENTARY_BUILDS+=" i386-efi"
    _SUPPLEMENTARY_BUILDS+=" x86_64-efi"
    _SUPPLEMENTARY_BUILDS+=" x86_64-xen"
    subpackages+=" grub-i386-coreboot"
    subpackages+=" grub-i386-efi"
    subpackages+=" grub-x86_64-efi"
    subpackages+=" grub-xen"
    ;;
  i686*)
    configure_args+=" ac_cv_sizeof_off_t=8"
    CFLAGS="-D_FILE_OFFSET_BITS=64"
    _NATIVE_PLATFORM="pc"
    # XXX: `_SUPPLEMENTARY_BUILDS-=x86_64-efi` relative to upstream policy
    _SUPPLEMENTARY_BUILDS+=" i386-coreboot"
    _SUPPLEMENTARY_BUILDS+=" i386-efi"
    _SUPPLEMENTARY_BUILDS+=" i386-xen"
    # XXX: `subpackages-=grub-x86_64-efi` relative to upstream policy
    subpackages+=" grub-i386-coreboot"
    subpackages+=" grub-i386-efi"
    subpackages+=" grub-xen"
    ;;
  aarch64*)
    _NATIVE_PLATFORM="efi"
    subpackages+=" grub-arm64-efi"
    ;;
  ppc*)
    _NATIVE_PLATFORM="ieee1275"
    subpackages+=" grub-powerpc-ieee1275"
    ;;
esac

post_extract() {
  sed \
    -i \
    -e 's,freetype/ftsynth.h,freetype2/ftsynth.h,' \
    util/grub-mkfont.c
}

do_configure() {
  unset AS
  unset CC
  unset CPP
  unset LD
  unset RANLIB

  local freestanding_cflags

  freestanding_cflags="-fno-stack-protector"

  # building with altivec generates broken grub core
  case "$XBPS_TARGET_MACHINE" in
    ppc*)
      freestanding_cflags+=" -mno-altivec"
      ;;
  esac
  CFLAGS+=" $freestanding_cflags"

  configure_args+=" --disable-grub-mkfont"
  configure_args+=" --disable-werror"
  configure_args+=" --enable-cache-stats"
  configure_args+=" --enable-device-mapper"
  configure_args+=" --enable-grub-mount"
  configure_args+=" --enable-nls"
  configure_args+=" --sbindir=/usr/bin"
  configure_args+=" --with-gnu-ld"

  # fix unifont.bdf location so grub-mkfont can create *.pf2 files
  sed \
    -i \
    -e 's|/usr/share/fonts/unifont|/usr/share/fonts/misc|' \
    configure

  # build tools
  msg_normal "Configuring grub tools...\n"
  mkdir "$wrksrc/build"
  cd "$wrksrc/build"
  ../configure \
    $_configure_args \
    --host="$XBPS_TARGET_MACHINE" \
    ${_NATIVE_PLATFORM:+--with-platform=$_NATIVE_PLATFORM}

  for _SUPP_BUILD in $_SUPPLEMENTARY_BUILDS; do
    _TARGET="${_SUPP_BUILD%%-*}"
    _PLATFORM="${_SUPP_BUILD##*-}"
    msg_normal "Configuring $_TARGET $_PLATFORM grub...\n"
    mkdir "$wrksrc/${_PLATFORM}_${_TARGET}_build"
    cd "$wrksrc/${_PLATFORM}_${_TARGET}_build"
    if [[ "$_TARGET" == "x86_64" ]] &&
      [[ "${XBPS_TARGET_MACHINE%-musl}" == "i686" ]]; then
      _TARGET="x86_64-linux-musl"
    fi
    CFLAGS="$freestanding_cflags" \
    ../configure \
      $configure_args \
      --disable-efiemu \
      --host="$XBPS_TARGET_MACHINE" \
      --libdir="/usr/lib" \
      --target="$_TARGET" \
      --with-platform="$_PLATFORM"
  done
}

do_build() {
  # XXX remove the strip wrapper
  rm "$XBPS_WRAPPERDIR/strip"

  msg_normal "Building grub tools...\n"
  cd "$wrksrc/build"
  make "$makejobs"

  for _SUPP_BUILD in $_SUPPLEMENTARY_BUILDS; do
    _TARGET="${_SUPP_BUILD%%-*}"
    _PLATFORM="${_SUPP_BUILD##*-}"
    msg_normal "Building $_TARGET $_PLATFORM grub...\n"
    cd "$wrksrc/${_PLATFORM}_${_TARGET}_build"
    make "$makejobs"
  done
}

do_install() {
  # XXX remove the strip wrapper
  rm "$XBPS_WRAPPERDIR/strip"

  for _SUPP_BUILD in $_SUPPLEMENTARY_BUILDS; do
    _TARGET="${_SUPP_BUILD%%-*}"
    _GRUB_TARGET="$_TARGET"
    case "$_GRUB_TARGET" in
    aarch64*)
      _GRUB_TARGET="arm64"
      ;;
    esac
    _PLATFORM="${_SUPP_BUILD##*-}"
    cd "$wrksrc/${_PLATFORM}_${_TARGET}_build"
    make DESTDIR="$DESTDIR/${_PLATFORM}_$_TARGET" install
    # remove non-platform specific files
    rm -rf "$DESTDIR/${_PLATFORM}_$_TARGET"/{boot,etc,usr/{share,bin}}
    rm -f "$DESTDIR/${_PLATFORM}_$_TARGET/usr/lib/grub/$_GRUB_TARGET-$_PLATFORM"/$_GRUB_TARGET-*
    rm -f "$DESTDIR/${_PLATFORM}_$_TARGET/usr/lib/grub/$_GRUB_TARGET-$_PLATFORM"/*.{module,image}
    cp -r "$DESTDIR/${_PLATFORM}_$_TARGET"/* "$DESTDIR"
    rm -rf "$DESTDIR/${_PLATFORM}_${_TARGET}"
  done

  cd "$wrksrc/build"
  make DESTDIR="$DESTDIR" install

  # required to compress info files
  vmkdir usr/share/info
  touch -f "$DESTDIR/usr/share/info/dir"

  vinstall "$FILESDIR/grub.default" 644 etc/default grub

  # kernel hooks
  vinstall "$FILESDIR/kernel.d/grub.post" 750 etc/kernel.d/post-install 50-grub
  vinstall "$FILESDIR/kernel.d/grub.post" 750 etc/kernel.d/post-remove 50-grub

  # add update-grub executable for newbs
  printf "#!/bin/sh\ngrub-mkconfig -o /boot/grub/grub.cfg\nexit \$?\n" >> \
    "$DESTDIR/usr/bin/update-grub"
  chmod 755 "$DESTDIR/usr/bin/update-grub"

  vmkdir usr/share/bash-completion/completions
  mv \
    "$DESTDIR/etc/bash_completion.d/grub" \
    "$DESTDIR/usr/share/bash-completion/completions"

  # remove useless tools
  rm "$DESTDIR/usr/bin/grub-ofpathname"
  rm "$DESTDIR/usr/bin/grub-sparc64-setup"
}

grub-utils_package() {
  short_desc+=" - additional utilities"
  depends="grub>=$version"
  pkg_install() {
    vmove usr/bin/grub-menulst2cfg
    vmove usr/bin/grub-fstest
  }
}

grub-x86_64-efi_package() {
  unset depends
  depends+=" dosfstools"
  depends+=" efibootmgr"
  depends+=" grub>=$version"
  short_desc+=" - x86_64 EFI support"
  pkg_install() {
    vmove usr/lib/grub/x86_64-efi
  }
}

grub-i386-efi_package() {
  unset depends
  depends+=" dosfstools"
  depends+=" efibootmgr"
  depends+=" grub>=$version"
  short_desc+=" - i386 EFI support"
  pkg_install() {
    vmove usr/lib/grub/i386-efi
  }
}

grub-i386-coreboot_package() {
  depends="grub>=$version"
  short_desc+=" - i386 coreboot support"
  pkg_install() {
    vmove usr/lib/grub/i386-coreboot
  }
}

grub-xen_package() {
  depends="grub>=$version"
  short_desc+=" - Xen PV support"
  pkg_install() {
    case "$XBPS_TARGET_MACHINE" in
      x86_64*)
        vmove usr/lib/grub/x86_64-xen
        ;;
      i686*)
        vmove usr/lib/grub/i386-xen
        ;;
    esac
  }
}

grub-arm64-efi_package() {
  unset depends
  depends+=" dosfstools"
  depends+=" efibootmgr"
  depends+=" grub>=$version"
  short_desc+=" - arm64 EFI support"
  pkg_install() {
    vmove usr/lib/grub/arm64-efi
  }
}

grub-powerpc-ieee1275_package() {
  unset depends
  depends+=" grub>=$version"
  depends+=" powerpc-utils"
  short_desc+=" - powerpc Open Firmware support"
  pkg_install() {
    vmove usr/lib/grub/powerpc-ieee1275
  }
}

# vim: set filetype=sh foldmethod=marker foldlevel=0 nowrap:
