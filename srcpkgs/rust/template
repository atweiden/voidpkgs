# partially adapted from alpine/ad√©lie's rust APKBUILD
maintainer="nox"
pkgname="rust"
version=1.71.1
revision=1
short_desc="Safe, concurrent, practical systems language"
depends+=" gcc"
depends+=" rust-std"
makedepends+=" libffi-devel"
makedepends+=" libxml2-devel"
makedepends+=" llvm15"
makedepends+=" ncurses-devel"
makedepends+=" zlib-devel"
if [[ "$XBPS_TARGET_LIBC" == "musl" ]]; then
  makedepends+=" libexecinfo-devel"
fi
hostmakedepends+=" cargo-bootstrap"
hostmakedepends+=" cmake"
hostmakedepends+=" curl"
hostmakedepends+=" pkg-config"
hostmakedepends+=" python3"
hostmakedepends+=" tar"
if [[ "$XBPS_LIBC" == "musl" ]]; then
  hostmakedepends+=" libexecinfo-devel"
fi
if [[ -n "$CROSS_BUILD" ]]; then
  hostmakedepends+=" llvm15"
  hostmakedepends+=" rust"
  # these are required for building the buildhost's stage0/1
  hostmakedepends+=" libffi-devel"
  hostmakedepends+=" libxml2-devel"
  hostmakedepends+=" ncurses-devel"
  hostmakedepends+=" zlib-devel"
else
  hostmakedepends+=" rust-bootstrap"
fi
homepage="https://www.rust-lang.org/"
license="MIT, Apache-2.0"
distfiles="https://static.rust-lang.org/dist/rustc-$version-src.tar.gz"
checksum="6fa90d50d1d529a75f6cc349784de57d7ec0ba2419b09bde7d335c25bd4e472e"
# needed for python files in rust-src
python_version=3
build_options="bindist"
desc_option_bindist="Generate tarballs for bootstrap"
lib32disabled="yes"
# cba for now
make_check="no"

# we need this because cargo verifies checksums of all files in vendor
# crates when it builds and gives us no way to override or update the
# file sanely... so just clear out the file list
_clear_vendor_checksums() {
  sed \
    -i \
    -e 's/\("files":{\)[^}]*/\1/' \
    "vendor/$1/.cargo-checksum.json"
}

post_patch() {
  rm -rf src/llvm-project
  if [[ -n "$build_option_bindist" ]]; then
    for x in "$FILESDIR/patches/static-llvm"/*.patch; do
      msg_normal "Applying patch $x\n"
      patch -sNp1 -i "$x"
    done
  fi

  # clear out all the checksum nonsense of patched vendor crates
  _clear_vendor_checksums libc
  _clear_vendor_checksums typenum
  _clear_vendor_checksums cc
  _clear_vendor_checksums target-lexicon
  _clear_vendor_checksums tikv-jemallocator
}

do_configure() {
  local _cross_args
  local _debug
  local _debug_rustc
  local _docs
  local _llvm_shared
  local _local_rebuild
  local _rpath

  if [[ -n "$CROSS_BUILD" ]]; then
    _local_rebuild="enable"
  else
    _local_rebuild="disable"
  fi

  # disable rustc debug info as it bloats up rust-std significantly set
  # to 1 or 2 if you wish to have debug info for rustc, it won't link
  # on 32-bit platforms though (too big)
  _debug_rustc="0"

  # just disable debug for now
  _debug="0"

  # if true, the binaries will be built with rpath, so the binaries will
  # be usable directly from the build directory, this is not desirable
  # for packaging but is useful when building bootstrap binaries
  if [[ -n "$build_option_bindist" ]]; then
    _rpath="enable"
    _docs="disable"
    _llvm_shared="disable"
  else
    _rpath="disable"
    _docs="enable"
    _llvm_shared="enable"
  fi

  if [[ -n "$CROSS_BUILD" ]]; then
    _cross_args+=" --set=target.$RUST_TARGET.ar=$AR"
    _cross_args+=" --set=target.$RUST_TARGET.cc=$CC"
    _cross_args+=" --set=target.$RUST_TARGET.crt-static=false"
    _cross_args+=" --set=target.$RUST_TARGET.cxx=$CXX"
    _cross_args+=" --set=target.$RUST_TARGET.linker=$CC"
    _cross_args+=" --set=target.$RUST_TARGET.llvm-config=/usr/bin/llvm-config"
  fi

  ./configure \
    --build="$RUST_BUILD" \
    --host="$RUST_TARGET" \
    --target="$RUST_TARGET" \
    --prefix="/usr" \
    --python="python3" \
    --enable-vendor \
    --enable-locked-deps \
    --enable-verbose-tests \
    --disable-full-bootstrap \
    --disable-extended \
    --disable-codegen-tests \
    --disable-dist-src \
    --$_llvm_shared-llvm-link-shared \
    --$_rpath-rpath \
    --$_local_rebuild-local-rebuild \
    --$_docs-docs \
    --debuginfo-level="$_debug" \
    --debuginfo-level-rustc="$_debug_rustc" \
    --debuginfo-level-tests=0 \
    --release-channel="stable" \
    --release-description="Void Linux" \
    --llvm-libunwind="no" \
    --llvm-config="/usr/bin/llvm-config" \
    --set="rust.optimize=true" \
    --set="rust.debug=false" \
    --set="rust.codegen-units=1" \
    --set="rust.codegen-units-std=1" \
    --set="rust.incremental=false" \
    --set="rust.parallel-compiler=false" \
    --set="rust.jemalloc=false" \
    --set="build.submodules=false" \
    --set="build.rustc=/usr/bin/rustc" \
    --set="build.cargo=/usr/bin/cargo" \
    --set="target.$RUST_BUILD.crt-static=false" \
    --set="target.$RUST_BUILD.cc=${CC_host:-$CC}" \
    --set="target.$RUST_BUILD.cxx=${CXX_host:-$CXX}" \
    --set="target.$RUST_BUILD.ar=${AR_host:-$AR}" \
    --set="target.$RUST_BUILD.linker=${CC_host:-$CC}" \
    --set="dist.src-tarball=false" \
    $_cross_args
}

# set the correct CFLAGS for the build host, we have to compile
# libbacktrace for it during stage1
#
# otherwise it attemps to use CFLAGS, which are the CFLAGS of the
# cross host
do_build() {
  export RUST_BACKTRACE=1
  export CARGO_HOME="$wrksrc/.cargo"
  export SSL_CERT_FILE="/etc/ssl/certs/ca-certificates.crt"
  # prevent sysroot from leaking in
  export RUSTFLAGS=""
  env CFLAGS_$RUST_BUILD="$CFLAGS_host" \
    CXXFLAGS_$RUST_BUILD="$CXXFLAGS_host" \
    CFLAGS_$RUST_TARGET="$CFLAGS" \
    CXXFLAGS_$RUST_TARGET="$CXXFLAGS" \
    python3 x.py dist --jobs "$XBPS_MAKEJOBS"
}

do_check() {
  export RUST_BACKTRACE=1

  python3 x.py test "$makejobs" --no-doc --no-fail-fast \
    src/test/codegen \
    src/test/codegen-units \
    src/test/incremental \
    src/test/mir-opt \
    src/test/pretty \
    src/test/run-make \
    src/test/run-make-fulldeps \
    src/test/ui \
    src/test/ui-fulldeps
}

do_install() {
  if [[ -n "$build_option_bindist" ]]; then
    mkdir -p "$XBPS_SRCDISTDIR/distfiles"
    install -m 0644 \
      "build/dist/rustc-$version-$RUST_TARGET.tar.xz" \
      "build/dist/rust-std-$version-$RUST_TARGET.tar.xz" \
      "$XBPS_SRCDISTDIR/distfiles"
    exit 1
  fi

  vmkdir usr
  tar xf "build/dist/rustc-$version-$RUST_TARGET.tar.gz" \
   -C "$DESTDIR/usr" --strip-components=2 --exclude="manifest.in"
  tar xf "build/dist/rust-std-$version-$RUST_TARGET.tar.gz" \
   -C "$DESTDIR/usr/lib" --strip-components=3 --exclude="manifest.in"
  tar xf "build/dist/rustc-dev-$version-$RUST_TARGET.tar.gz" \
   -C "$DESTDIR/usr/lib" --strip-components=3 --exclude="manifest.in"
  tar xf "build/dist/rust-docs-$version-$RUST_TARGET.tar.gz" \
   -C "$DESTDIR/usr" --strip-components=2 --exclude="manifest.in"
  tar xf "build/dist/rust-src-$version.tar.gz" \
   -C "$DESTDIR/usr" --strip-components=2 --exclude="manifest.in"

  vlicense COPYRIGHT
  vlicense LICENSE-APACHE
  vlicense LICENSE-MIT

  cd "$DESTDIR/usr/lib"
  # symlinks instead of copies
  rm *.so
  ln -sf "rustlib/$RUST_TARGET/lib"/*.so .
}

rust-doc_package() {
  short_desc+=" - documentation"
  pkg_install() {
    vmove usr/share/doc
  }
}

rust-std_package() {
  short_desc+=" - standard library"
  if [[ "$XBPS_TARGET_LIBC" == "musl" ]]; then
    depends="libexecinfo-devel"
  fi
  pkg_install() {
    vmove usr/lib/rustlib
    vmove "usr/lib/rustlib/$RUST_TARGET"
    vmove usr/lib/rustlib/rustc-src
  }
}

rust-src_package() {
  short_desc+=" - source code"
  pkg_install() {
    vmove usr/lib/rustlib/src
  }
}

# REMARKS:
#
# permission to use rust and cargo trademark is granted, see:
# https://github.com/rust-lang/core-team/issues/4
#
# always make sure custom distfiles used for bootstrap are uploaded to
# https://repo-default.voidlinux.org/distfiles/

# vim: set filetype=sh foldmethod=marker foldlevel=0 nowrap:
