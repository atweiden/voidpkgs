maintainer="Andy Weidenbaum <archbaum@gmail.com>"
pkgname="rust"
version=1.33.0
revision=1
_rust_dist_version=1.33.0
_cargo_dist_version=0.33.0
# NB. if you push any(!) new version, don't forget to put a musl build
# output in https://alpha.de.repo.voidlinux.org/distfiles/
short_desc="Safe, concurrent, practical systems language"
depends="rust-std"
makedepends+=" libffi-devel"
makedepends+=" libxml2-devel"
makedepends+=" ncurses-devel"
makedepends+=" zlib-devel"
makedepends+=" $(vopt_if internal_llvm python-devel llvm)"
hostmakedepends+=" cmake"
hostmakedepends+=" curl"
hostmakedepends+=" pkg-config"
hostmakedepends+=" python"
homepage="https://www.rust-lang.org/"
license="MIT, Apache-2.0"
distfiles="https://static.rust-lang.org/dist/rustc-$version-src.tar.gz"
checksum="5a01a8d7e65126f6079042831385e77485fa5c014bf217e9f3e4aff36a485d94"
wrksrc="rustc-$version-src"
patch_args="-Np1"
build_style="configure"
make_build_args+=" VERBOSE=1"
make_build_args+=" dist"
build_options="internal_llvm"
lib32disabled="yes"

if [[ -n "$CROSS_BUILD" ]]; then
  hostmakedepends+=" cargo"
  hostmakedepends+=" $(vopt_if internal_llvm '' llvm)"
  # required for building the buildhost's stage0/1
  hostmakedepends+=" libffi-devel"
  hostmakedepends+=" libxml2-devel"
  hostmakedepends+=" ncurses-devel"
  hostmakedepends+=" zlib-devel"
else
  case "$XBPS_MACHINE" in
    x86_64-musl)
      hostmakedepends+=" libcurl"
      hostmakedepends+=" libgit2"
      distfiles+=" https://alpha.de.repo.voidlinux.org/distfiles/rustc-$_rust_dist_version-x86_64-unknown-linux-musl.tar.xz"
      distfiles+=" https://alpha.de.repo.voidlinux.org/distfiles/rust-std-$_rust_dist_version-x86_64-unknown-linux-musl.tar.xz"
      distfiles+=" https://alpha.de.repo.voidlinux.org/distfiles/cargo-$_cargo_dist_version-x86_64-unknown-linux-musl-libressl-2.8.tar.gz"
      checksum+=" 27133fe50d7f43009b802d608654c828e4589cf27810fd7151b67de7de3706e0"
      checksum+=" 6971b0b9147371eaf81ece7ac6ee91d2f7adbbd3129b9a80170f394c9a35636a"
      checksum+=" 7d3e669dc5ddde7529ab0df2d0397648a679426fc56dd4c93d94f84fd68366d5"
      ;;
    x86_64)
      # extract from src/stage0.txt
      distfiles+=" https://static.rust-lang.org/dist/rustc-$_rust_dist_version-x86_64-unknown-linux-gnu.tar.gz"
      distfiles+=" https://static.rust-lang.org/dist/rust-std-$_rust_dist_version-x86_64-unknown-linux-gnu.tar.gz"
      distfiles+=" https://static.rust-lang.org/dist/cargo-$_cargo_dist_version-x86_64-unknown-linux-gnu.tar.xz"
      checksum+=" 54a342f718b712d8a17fd7878ebd37d22a82ebc70b59c421168cd4153fd04c2b"
      checksum+=" 661c2ba717ae1502f002b4c6e7aeb8941685c7ea8fe7ac26ed9ede26f615b7af"
      checksum+=" c2c31db68c4dcb50ad856a19e6f11489a0d4df1212f31bd068dfbb73c5425761"
      ;;
    i686)
      # extract from src/stage0.txt
      distfiles+=" https://static.rust-lang.org/dist/rustc-$_rust_dist_version-i686-unknown-linux-gnu.tar.gz"
      distfiles+=" https://static.rust-lang.org/dist/rust-std-$_rust_dist_version-i686-unknown-linux-gnu.tar.gz"
      distfiles+=" https://static.rust-lang.org/dist/cargo-$_cargo_dist_version-i686-unknown-linux-gnu.tar.xz"
      checksum+=" be4cdc82b511b0f2499fc9b7048b01069257ca2dedb270a7938e1846beb5a349"
      checksum+=" f4bba5b77c61a30f0a4c83e152f216c62f974185c4c012c295a5d19d44381a62"
      checksum+=" 13acdb3c9f2505805ceed8a696f5f62ab8cd73e443cd43d6edd588aad88e1c32"
      ;;
    ppc64le)
      distfiles+=" https://static.rust-lang.org/dist/rustc-$_rust_dist_version-powerpc64le-unknown-linux-gnu.tar.xz"
      distfiles+=" https://static.rust-lang.org/dist/rust-std-$_rust_dist_version-powerpc64le-unknown-linux-gnu.tar.xz"
      distfiles+=" https://alpha.de.repo.voidlinux.org/distfiles/cargo-$_cargo_dist_version-powerpc64le-unknown-linux-gnu.tar.xz"
      checksum+=" 75ef3992b3de501f0b3442315e6ddef9d6f10070174fdd0f3d62e87534fddbc5"
      checksum+=" 984d3ca2a47db04345a2bddd657761f66d209ef95a02097ad4bd549f45a0dc9f"
      checksum+=" 03ece4d677ad59f08a514eb90dd3bd6cad4399fbbaf3d0e916323fbce38e25d1"
      ;;
    ppc64le-musl)
      distfiles+=" https://alpha.de.repo.voidlinux.org/distfiles/rustc-$_rust_dist_version-powerpc64le-unknown-linux-musl.tar.xz"
      distfiles+=" https://alpha.de.repo.voidlinux.org/distfiles/rust-std-$_rust_dist_version-powerpc64le-unknown-linux-musl.tar.xz"
      distfiles+=" https://alpha.de.repo.voidlinux.org/distfiles/cargo-$_cargo_dist_version-powerpc64le-unknown-linux-musl.tar.xz"
      checksum+=" f3a493414b07e9b1b535269cd39552ece586ccad3bfadddd92a952e08179844d"
      checksum+=" 698dbec4d359bb4a378eef807035c9b0b4fffe478e50af044ae47b485b9b6f8e"
      checksum+=" 801490f04eac96e883f56434747042c375aa3d210b224c2735e02a3a1eab95a0"
      ;;
    ppc64-musl)
      distfiles+=" https://alpha.de.repo.voidlinux.org/distfiles/rustc-$_rust_dist_version-powerpc64-unknown-linux-musl.tar.xz"
      distfiles+=" https://alpha.de.repo.voidlinux.org/distfiles/rust-std-$_rust_dist_version-powerpc64-unknown-linux-musl.tar.xz"
      distfiles+=" https://alpha.de.repo.voidlinux.org/distfiles/cargo-$_cargo_dist_version-powerpc64-unknown-linux-musl.tar.xz"
      checksum+=" 56805b5a8a7a2d07937ab12a00154a64bf756d0c85d0d69573bc27365fc3157b"
      checksum+=" e9e15702928f2633b1b971911c992c5ed5c552cf4a05f40bc177e53daa05a764"
      checksum+=" ae90844974681c3ee85a855ae0ed27f06d22215e40f825f3b7ca705d8a7cfe7b"
      ;;
  esac
fi

post_extract() {
  if [[ -z "$CROSS_BUILD" ]]; then
    mkdir -p stage0
    rm ../rustc-*/rustc/manifest.in
    cp -bflr ../rustc-*/rustc/* stage0
    rm ../rust-std-*/rust-std-*/manifest.in
    cp -bflr ../rust-std-*/rust-std-*/* stage0
    case "$XBPS_MACHINE" in
      *-musl|ppc64*)
        cp -bflr ../cargo stage0/bin
        ;;
      *)
        rm ../cargo-*/cargo/manifest.in
        cp -flr ../cargo-*/cargo/* stage0
        ;;
    esac
  fi
}

post_patch() {
  if [[ -n "$build_option_internal_llvm" ]]; then
    # patches for rust's bundled llvm
    pushd src/llvm
    for x in "$FILESDIR/patches/internal-llvm"/llvm-*.patch; do
      msg_normal "Applying $x to llvm\n"
      patch -sNp1 -i $x
    done
    popd
  else
    rm -rf src/llvm
    # patches for system llvm
    for x in "$FILESDIR/patches/sys-llvm"/*.patch; do
      msg_normal "Applying patch $x\n"
      patch -sNp1 -i $x
    done
  fi

  sed \
    -i \
    -e "/LD_LIBRARY_PATH/d" \
    src/bootstrap/bootstrap.py
}

do_configure() {
  export LD_LIBRARY_PATH="$wrksrc/stage0/lib"

  configure_args+=" --build=$RUST_BUILD"
  configure_args+=" --disable-codegen-tests"
  configure_args+=" --disable-docs"
  configure_args+=" --disable-full-bootstrap"
  configure_args+=" --disable-rpath"
  configure_args+=" --host=$RUST_TARGET"
  configure_args+=" --prefix=/usr"
  configure_args+=" --release-channel=stable"
  configure_args+=" --target=$RUST_TARGET"

  if ! [[ -n "$build_option_internal_llvm" ]]; then
    configure_args+=" --enable-llvm-link-shared"
    configure_args+=" --llvm-root=/usr"
    configure_args+=" --set=target.$RUST_TARGET.llvm-config=/usr/bin/llvm-config"
    configure_args+=" --set=target.$RUST_BUILD.llvm-config=/usr/bin/llvm-config"
  fi

  if [[ -n "$CROSS_BUILD" ]]; then
    configure_args+=" --enable-local-rebuild"
    configure_args+=" --local-rust-root=/usr"
    # set the appropriate values for the native compilation tools
    configure_args+=" --set=target.$RUST_BUILD.cc=$CC_host"
    configure_args+=" --set=target.$RUST_BUILD.cxx=$CXX_host"
    configure_args+=" --set=target.$RUST_BUILD.ar=$AR_host"
    configure_args+=" --set=target.$RUST_BUILD.linker=$CC_host"
  else
    configure_args+=" --local-rust-root=$wrksrc/stage0"
  fi
  case "$XBPS_TARGET_MACHINE" in
    *-musl)
      configure_args+=" --set=target.$RUST_TARGET.musl-root=/usr"
      ;;
  esac

  ./configure $configure_args
}

pre_build() {
  export CARGO_HOME="$wrksrc/.cargo"
  export SSL_CERT_FILE="/etc/ssl/certs/ca-certificates.crt"
  export LD_LIBRARY_PATH="$wrksrc/stage0/lib"
  export PATH="$wrksrc/stage0/bin:$PATH"
  export MUSL_ROOT="/usr"
  export RUST_BACKTRACE=1
  export RUSTFLAGS="-C linker=$CC"
}

# unset LDFLAGS, otherwise cross builds to the same arch will fail
do_build() {
  # set the correct CFLAGS for the build host, we have to compile
  # libbacktrace for it during stage1
  # otherwise it attemps to use CFLAGS, which are the CFLAGS of the
  # cross host
  env CFLAGS_$RUST_BUILD="$CFLAGS_host" LDFLAGS='' make "$makejobs" $make_build_args
}

do_install() {
  vmkdir usr
  tar xf "build/dist/rustc-$version-$RUST_TARGET.tar.gz" -C "$DESTDIR/usr" --strip-components=2 --exclude="manifest.in"
  tar xf "build/dist/rust-std-$version-$RUST_TARGET.tar.gz" -C "$DESTDIR/usr/lib" --strip-components=3 --exclude="manifest.in"

  vlicense COPYRIGHT
  vlicense LICENSE-APACHE
  vlicense LICENSE-MIT

  cd "$DESTDIR/usr/lib"
  # symlinks instead of copies
  ln -sf rustlib/*/lib/*.so .
}

rust-doc_package() {
  short_desc+=" - documentation"
  archs="noarch"
  pkg_install() {
    vmove usr/share/doc
  }
}

rust-std_package() {
  short_desc+=" - standard library"
  pkg_install() {
    vmove usr/lib/rustlib
  }
}

# vim: set filetype=sh foldmethod=marker foldlevel=0 nowrap:
