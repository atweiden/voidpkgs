maintainer="Andy Weidenbaum <archbaum@gmail.com>"
pkgname="rust"
version=1.28.0
revision=1
short_desc="Safe, concurrent, practical systems language"
# NB. if you push any(!) new version, don't forget to put a build
# output of musl to https://alpha.de.repo.voidlinux.org/distfiles/
only_for_archs+=" i686"
only_for_archs+=" x86_64"
only_for_archs+=" x86_64-musl"
makedepends+=" libffi-devel"
makedepends+=" libunwind-devel"
makedepends+=" libxml2-devel"
makedepends+=" llvm"
makedepends+=" ncurses-devel"
makedepends+=" zlib-devel"
hostmakedepends+=" cmake"
hostmakedepends+=" curl"
hostmakedepends+=" pkg-config"
hostmakedepends+=" python"
homepage="http://www.rust-lang.org/"
license="MIT, Apache-2.0"
distfiles="https://static.rust-lang.org/dist/rustc-$version-src.tar.gz"
checksum="1d5a81729c6f23a0a23b584dd249e35abe9c6f7569cee967cc42b1758ecd6486"
wrksrc="rustc-$version-src"
build_style="configure"
patch_args="-Np1"
make_build_args+=" dist"
make_build_args+=" VERBOSE=1"
lib32disabled="yes"

_rust_dist_version=1.27.2
_cargo_dist_version=0.29.0

case "$XBPS_MACHINE" in
  x86_64-musl)
    hostmakedepends+=" libcurl"
    hostmakedepends+=" libgit2"
    distfiles+=" https://alpha.de.repo.voidlinux.org/distfiles/rustc-$_rust_dist_version-x86_64-unknown-linux-musl.tar.xz"
    distfiles+=" https://alpha.de.repo.voidlinux.org/distfiles/rust-std-$_rust_dist_version-x86_64-unknown-linux-musl.tar.xz"
    distfiles+=" https://alpha.de.repo.voidlinux.org/distfiles/cargo-$_cargo_dist_version-x86_64-unknown-linux-musl.tar.gz"
    checksum+=" 2da811f9a81f63a93d62cefe15f391efaff663438f2c364fd1a522ef576753f4"
    checksum+=" e18aea5529d434e0950a77c266c3230ea878e3f3ea8b4114ee5a081092f98037"
    checksum+=" d54f7b4c6e8af657e6173e9e0200130b2f297f365ed4c06a4e9029762d975836"
    ;;
  x86_64)
    # extract from src/stage0.txt
    distfiles+=" https://static.rust-lang.org/dist/rustc-$_rust_dist_version-x86_64-unknown-linux-gnu.tar.gz"
    distfiles+=" https://static.rust-lang.org/dist/rust-std-$_rust_dist_version-x86_64-unknown-linux-gnu.tar.gz"
    distfiles+=" https://static.rust-lang.org/dist/cargo-$_cargo_dist_version-x86_64-unknown-linux-gnu.tar.xz"
    checksum+=" ec3efc17ddbe6625840957049e15ebae960f447c8e8feb7da40c28dd6adf655f"
    checksum+=" 68984f2233853d3e9c7c56edd72a91b5822157f28fdb42023fb311af68f842dd"
    checksum+=" 2e62f91aab9ea496209a060e7ec62f088f5081b568a28b88f3c8ea7073db9829"
    ;;
  i686)
    # extract from src/stage0.txt
    distfiles+=" https://static.rust-lang.org/dist/rustc-$_rust_dist_version-i686-unknown-linux-gnu.tar.gz"
    distfiles+=" https://static.rust-lang.org/dist/rust-std-$_rust_dist_version-i686-unknown-linux-gnu.tar.gz"
    distfiles+=" https://static.rust-lang.org/dist/cargo-$_cargo_dist_version-i686-unknown-linux-gnu.tar.xz"
    checksum+=" a9ba9c97cf4818ab14966617390eadfc3dfd5221033f8f749aebd86c1d722ef9"
    checksum+=" 0ac6356223f53ec5f21cea6a9e9e5cd2fee3d45916f831e1ca54853893ec0b73"
    checksum+=" 2bc3468b9b470824bf366f7404ad36644ad4d5a41f1be29601fd6a138d3b72a5"
    ;;
esac

post_extract() {
  rm -rf src/llvm

  case "$XBPS_MACHINE" in
    *-musl)
      patch -p1 < "$FILESDIR/musl.patch"
      ;;
  esac

  mkdir -p stage0
  cp -flr ../rustc-*/rustc/* stage0
  cp -flr ../rust-std-*/rust-std-*/* stage0
  case "$XBPS_MACHINE" in
    *-musl)
      cp -flr ../cargo stage0/bin
      ;;
    *)
      cp -flr ../cargo-*/cargo/* stage0
      ;;
  esac

  # XXX: cheat Rust build system so we can build rustc using different
  # version of (prebuilt) stable rustc than preconfigured. It's hack-ish,
  # but since we're basically rebuilding rustc with the same version,
  # it's actually safe
  #
  # XXX: --enable-local-rebuild from #33787 didn't work, don't know why
  export LD_LIBRARY_PATH="$wrksrc/stage0/lib"
  rustc_ver="$("$wrksrc/stage0/bin/rustc" --version | cut -f2 -d ' ')"
  rustc_key="$(printf "$rustc_ver" | md5sum | cut -c1-8)"
  sed \
    -E \
    -i \
    -e "s/^(rustc):.*/\1: $rustc_ver-1970-01-01/" \
    -e "s/^(rustc_key):.*/\1: $rustc_key/" \
    src/stage0.txt

  # generate config for bootstrap.py to use our prebuilt rustc and cargo
  # for bootstrapping instead of downloading snapshot from internet
  cat > config.toml <<EOF
[build]
cargo = "$wrksrc/stage0/bin/cargo"
rustc = "$wrksrc/stage0/bin/rustc"
EOF

  sed -i /LD_LIBRARY_PATH/d src/bootstrap/bootstrap.py
}

pre_build() {
  export CARGO_HOME="$wrksrc/.cargo"
  export LD_LIBRARY_PATH="$wrksrc/stage0/lib"
  export MUSL_ROOT="/usr"
  export PATH="$wrksrc/stage0/bin:$PATH"
  export RUST_BACKTRACE=1
  export SSL_CERT_FILE="/etc/ssl/certs/ca-certificates.crt"
}

do_configure() {
  local _triplet
  case "$XBPS_TARGET_MACHINE" in
    i686)
      _triplet="i686-unknown-linux-gnu"
      ;;
    x86_64)
      _triplet="x86_64-unknown-linux-gnu"
      ;;
    x86_64-musl)
      _triplet="x86_64-unknown-linux-musl"
      ;;
    *)
      _triplet="$XBPS_TARGET_MACHINE"
      ;;
  esac
  export LD_LIBRARY_PATH="$wrksrc/stage0/lib"
  configure_args+=" --build=$_triplet"
  configure_args+=" --disable-codegen-tests"
  configure_args+=" --disable-docs"
  configure_args+=" --disable-rpath"
  configure_args+=" --enable-ccache"
  configure_args+=" --enable-local-rust"
  configure_args+=" --host=$_triplet"
  configure_args+=" --llvm-root=/usr"
  configure_args+=" --local-rust-root=$wrksrc/stage0"
  configure_args+=" --prefix=/usr"
  configure_args+=" --release-channel=stable"
  case "$XBPS_TARGET_MACHINE" in
  *-musl)
    configure_args+=" --disable-jemalloc"
    configure_args+=" --musl-root=/usr"
    ;;
  esac
  ./configure $configure_args
}

do_install() {
  vmkdir usr
  tar xf build/dist/rustc-*-*-*.tar.gz -C "$DESTDIR/usr" --strip-components=2 --exclude="manifest.in"
  tar xf build/dist/rust-std-*-*-*.tar.gz -C "$DESTDIR/usr/lib" --strip-components=3 --exclude="manifest.in"
  cd "$DESTDIR/usr/lib"
  # symlinks instead of copies
  ln -sf rustlib/*/lib/*.so .
}

post_install() {
  vlicense COPYRIGHT
  vlicense LICENSE-APACHE
  vlicense LICENSE-MIT
}

rust-doc_package() {
  short_desc+=" - documentation"
  noarch="yes"
  pkg_install() {
    vmove usr/share/doc
  }
}

# vim: set filetype=sh foldmethod=marker foldlevel=0:
