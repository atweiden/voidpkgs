maintainer="nox"
pkgname="llvm11"
version=11.0.0
revision=1
short_desc="Low Level Virtual Machine"
depends="libllvm11"
makedepends+=" binutils-devel"
makedepends+=" libatomic-devel"
makedepends+=" libedit-devel"
makedepends+=" libffi-devel"
makedepends+=" libxml2-devel"
makedepends+=" python3-devel"
makedepends+=" zlib-devel"
hostmakedepends+=" groff"
hostmakedepends+=" libffi-devel"
hostmakedepends+=" perl"
hostmakedepends+=" python3"
hostmakedepends+=" swig"
hostmakedepends+=" zlib-devel"
homepage="https://www.llvm.org"
license="NCSA"
distfiles="https://github.com/llvm/llvm-project/releases/download/llvmorg-$version/llvm-$version.src.tar.xz"
checksum="913f68c898dfb4a03b397c5e11c6a2f39d0f22ed7665c9cefa87a34423a72469"
wrksrc="llvm-$version.src"
patch_args="-Np0"
build_style="cmake"
configure_args+=" -DCMAKE_BUILD_TYPE=Release"
configure_args+=" -DLLVM_BINUTILS_INCDIR=/usr/include"
configure_args+=" -DLLVM_BUILD_LLVM_DYLIB=ON"
configure_args+=" -DLLVM_ENABLE_FFI=ON"
configure_args+=" -DLLVM_ENABLE_RTTI=ON"
configure_args+=" -DLLVM_INSTALL_UTILS=ON"
configure_args+=" -DLLVM_LINK_LLVM_DYLIB=ON"
python_version=3
lib32disabled="yes"

post_patch() {
  # patches
  cd "$XBPS_BUILDDIR/llvm-$version.src"
  for i in "$FILESDIR/patches/llvm"/llvm-*.patch; do
    msg_normal "Applying $i to llvm\n"
    patch -sNp1 -i "$i"
  done

  # update config.guess for better platform detection
  cp "$XBPS_COMMONDIR/environment/configure/automake/config.guess" "$wrksrc/cmake"
}

pre_configure() {
  # vastly reduce size of debugging symbols
  CFLAGS="${CFLAGS/ -g/ -g1}"
  CXXFLAGS="${CXXFLAGS/ -g/ -g1}"

  # since gcc9, the build likes to blow up for ppc32 apparently because
  # of clang being too large for a 24-bit relative call to the PLT,
  # so optimize for size instead
  case "$XBPS_TARGET_MACHINE" in
    mips*-musl|ppc|ppc-musl)
      configure_args+=" -DVOID_CXX_OPT_FLAGS=-Os"
      ;;
  esac

  if [[ -n "$CROSS_BUILD" ]]; then
    msg_normal "Building host tblgen\n"
    mkdir -p build/HOST
    cd build/HOST
    CC="$BUILD_CC" \
    CFLAGS="$BUILD_CFLAGS" \
    CXX="$BUILD_CXX" \
    CXXFLAGS="$BUILD_CXXFLAGS" \
    LDFLAGS="$BUILD_LDFLAGS" \
      cmake ../.. -DCMAKE_BUILD_TYPE="Release"
    make "$makejobs" -C utils/TableGen
    configure_args+=" -DLLVM_TABLEGEN=$wrksrc/build/HOST/bin/llvm-tblgen"
    cd ../..
  fi

  case "$XBPS_TARGET_MACHINE" in
    i686*)
      _arch="X86"
      ;;
    x86_64*)
      _arch="X86"
      ;;
    armv5*)
      _arch="Armv5te"
      ;;
    armv6*)
      _arch="Armv6"
      ;;
    armv7*)
      _arch="Armv7"
      ;;
    aarch64*)
      _arch="AArch64"
      ;;
    mips*)
      _arch="Mips"
      ;;
    ppc*)
      _arch="PowerPC"
      ;;
  esac
  configure_args+=" -DLLVM_TARGET_ARCH=$_arch"
  configure_args+=" -DLLVM_HOST_TRIPLE=${XBPS_CROSS_TRIPLET:-$XBPS_TRIPLET}"
  configure_args+=" -DLLVM_DEFAULT_TARGET_TRIPLE=${XBPS_CROSS_TRIPLET:-$XBPS_TRIPLET}"
}

do_install() {
  vlicense LICENSE.TXT

  cd build
  cmake \
    -DCMAKE_INSTALL_PREFIX="$DESTDIR/usr" \
    -P cmake_install.cmake

  # fix permissions of static libs
  chmod -x "$DESTDIR/usr/lib"/*.a

  # required for multilib
  if [[ "$XBPS_TARGET_MACHINE" == "x86_64" ]]; then
    for _header in llvm-config; do
      mv "$DESTDIR/usr/include/llvm/Config"/$_header{,-64}.h
      vinstall "$FILESDIR/llvm-Config-$_header.h" 644 \
        usr/include/llvm/Config "$_header.h"
    done
  fi

  # remove llvm-config-host in cross builds
  if [[ -n "$CROSS_BUILD" ]]; then
    rm -f "$DESTDIR/usr/bin/llvm-config-host"
  fi
}

libllvm11_package() {
  short_desc+=" - runtime library"
  pkg_install() {
    vmove "usr/lib/libLLVM-*.so*"
  }
}

# vim: set filetype=sh foldmethod=marker foldlevel=0 nowrap:
