maintainer="nox"
pkgname="nginx"
version=1.24.0
revision=5
_tests_gitrev="36a4563f7f00"
_njs_version=0.7.12
short_desc="High performance web and reverse proxy server"
makedepends+=" geoip"
makedepends+=" geoip-devel"
makedepends+=" libxslt-devel"
makedepends+=" openssl-devel"
makedepends+=" pcre2-devel"
makedepends+=" perl"
makedepends+=" which"
if [[ "$XBPS_TARGET_LIBC" == "glibc" ]]; then
  makedepends+=" libxcrypt-devel"
  hostmakedepends+=" libxcrypt-devel"
fi
checkdepends+=" perl"
checkdepends+=" perl-FCGI"
checkdepends+=" perl-GD"
checkdepends+=" perl-IO-Socket-SSL"
checkdepends+=" uwsgi"
checkdepends+=" uwsgi-python3"
checkdepends+=" which"
hostmakedepends="$makedepends"
homepage="https://nginx.org"
license="BSD-2-Clause"
changelog="https://nginx.org/en/CHANGES-${version%.*}"
distfiles+=" https://nginx.org/download/nginx-$version.tar.gz"
distfiles+=" https://hg.nginx.org/nginx-tests/archive/$_tests_gitrev.tar.gz"
distfiles+=" https://hg.nginx.org/njs/archive/$_njs_version.tar.gz"
checksum+=" 77a2541637b92a621e3ee76776c8b7b40cf6d707e69ba53a940283e30ff2f55d"
checksum+=" a90641a75314427b6c02e3a5e811c66d6fe7c0cad93752a6a2725d0129e08fbf"
checksum+=" af648336c236f625311edcd90b83f37702fadad160c2a5ed57b34656609e918a"
conf_files+=" /etc/nginx/fastcgi.conf"
conf_files+=" /etc/nginx/fastcgi_params"
conf_files+=" /etc/nginx/koi-win"
conf_files+=" /etc/nginx/koi-utf"
conf_files+=" /etc/nginx/mime.types"
conf_files+=" /etc/nginx/nginx.conf"
conf_files+=" /etc/nginx/scgi_params"
conf_files+=" /etc/nginx/uwsgi_params"
conf_files+=" /etc/nginx/win-utf"
create_wrksrc="yes"
build_style="gnu-makefile"
build_wrksrc="nginx-$version"
_cfgdir="/etc/nginx"
_tmpdir="/var/lib/nginx/tmp"
configure_args+=" --add-dynamic-module=../njs-$_njs_version/nginx"
configure_args+=" --conf-path=$_cfgdir/nginx.conf"
configure_args+=" --error-log-path=/var/log/nginx/error.log"
configure_args+=" --group=nginx"
configure_args+=" --http-client-body-temp-path=$_tmpdir/client-body"
configure_args+=" --http-fastcgi-temp-path=$_tmpdir/fastcgi"
configure_args+=" --http-log-path=/var/log/nginx/access.log"
configure_args+=" --http-proxy-temp-path=$_tmpdir/proxy"
configure_args+=" --http-scgi-temp-path=$_tmpdir/scgi"
configure_args+=" --http-uwsgi-temp-path=$_tmpdir/uwsgi"
configure_args+=" --lock-path=/var/lock/nginx.lock"
configure_args+=" --modules-path=/usr/lib/nginx/modules"
configure_args+=" --pid-path=/run/nginx.pid"
configure_args+=" --prefix=$_cfgdir"
configure_args+=" --sbin-path=/usr/bin/nginx"
configure_args+=" --user=nginx"
configure_args+=" --with-compat"
configure_args+=" --with-file-aio"
configure_args+=" --with-http_auth_request_module"
configure_args+=" --with-http_dav_module"
configure_args+=" --with-http_geoip_module=dynamic"
configure_args+=" --with-http_gunzip_module"
configure_args+=" --with-http_gzip_static_module"
configure_args+=" --with-http_perl_module=dynamic"
configure_args+=" --with-http_realip_module"
configure_args+=" --with-http_slice_module"
configure_args+=" --with-http_ssl_module"
configure_args+=" --with-http_stub_status_module"
configure_args+=" --with-http_sub_module"
configure_args+=" --with-http_v2_module"
configure_args+=" --with-http_xslt_module=dynamic"
configure_args+=" --with-mail"
configure_args+=" --with-mail_ssl_module"
configure_args+=" --with-openssl-opt=enable-ktls"
configure_args+=" --with-pcre-jit"
configure_args+=" --with-stream=dynamic"
configure_args+=" --with-stream_geoip_module=dynamic"
configure_args+=" --with-stream_realip_module"
configure_args+=" --with-stream_ssl_module"
configure_args+=" --with-stream_ssl_preread_module"
configure_args+=" --with-threads"
# tests fail when nginx run as root and there is no nginx user
make_check="ci-skip"
system_accounts="nginx"
nginx_homedir="/var/lib/nginx"
make_dirs+=" /var/lib/nginx 1777 root root"
make_dirs+=" /var/lib/nginx/tmp 0750 nginx root"
make_dirs+=" /var/log/nginx 0750 root root"

do_configure() {
  if [[ -n "$CROSS_BUILD" ]]; then
    local perlprefix

    # fake configure run on host
    unset CC
    unset CFLAGS
    unset CPP
    unset CPPFLAGS
    unset LD
    unset LDFLAGS

    perlprefix="$XBPS_STATEDIR/perlprefix-$XBPS_TARGET_MACHINE"
    mkdir -p "$perlprefix"
    if [[ -d "$XBPS_CROSS_BASE/usr/lib/perl5/core_perl" ]]; then
      cp "$XBPS_CROSS_BASE/usr/lib/perl5/core_perl/Config"*.p? "$perlprefix"
      cp "$XBPS_CROSS_BASE/usr/lib/perl5/core_perl/Errno.pm" "$perlprefix"
      sed \
        -i \
        -e "s;archlibexp => '\(.*\)';archlibexp => '$XBPS_CROSS_BASE\1';" \
        "$perlprefix/Config.pm"
      sed \
        -i \
        -e "s;^archlibexp='\(.*\)';archlibexp='$XBPS_CROSS_BASE\1';" \
        "$perlprefix/Config_heavy.pl"
    else
      cp "/usr/lib/perl5/core_perl/Config"*.p? "$perlprefix"
      cp "/usr/lib/perl5/core_perl/Errno.pm" "$perlprefix"
    fi
    export PERL5LIB="$perlprefix"
  fi

  ./configure $configure_args
  (cd "../njs-$_njs_version" && ./configure)
}

pre_build() {
  if [[ -n "$CROSS_BUILD" ]]; then
    mkdir -p "../njs-$_njs_version/build"
    case "$XBPS_TARGET_MACHINE" in
      arm*)
        cp "$FILESDIR/ngx_auto_config.h.armv6l" objs/ngx_auto_config.h
        cp "$FILESDIR/njs_auto_config.h.armv6l" "../njs-$_njs_version/build/njs_auto_config.h"
        ;;
      aarch64*)
        cp "$FILESDIR/ngx_auto_config.h.aarch64" objs/ngx_auto_config.h
        cp "$FILESDIR/njs_auto_config.h.aarch64" "../njs-$_njs_version/build/njs_auto_config.h"
        ;;
      riscv64*)
        cp "$FILESDIR/ngx_auto_config.h.riscv64" objs/ngx_auto_config.h
        cp "$FILESDIR/njs_auto_config.h.riscv64" "../njs-$_njs_version/build/njs_auto_config.h"
        ;;
    esac
    sed \
      -i \
      -e "s:-I/usr:-I$XBPS_CROSS_BASE/usr:" \
      objs/Makefile
  fi

  sed \
    -i \
    -e 's/-lcrypt/$(LDFLAGS) &/' \
    objs/Makefile

  export LD="$CC"

  (cd "../njs-$_njs_version"
   make \
     "$makejobs" \
     NJS_CC="$CC" \
     NJS_CFLAGS="$CFLAGS -fPIC" \
     NJS_LINK="$CC -O" \
     NJS_STATIC_LINK="$AR -r -c")
}

do_check() {
  TEST_NGINX_BINARY="$PWD/objs/nginx" \
    prove -j $XBPS_MAKEJOBS "../$pkgname-tests-$_tests_gitrev"
}

post_install() {
  sed \
    -i \
    -e 's|\<user\s\+\w\+;|user html;|g' \
    -e '44s|html|/usr/share/nginx/html|' \
    -e '54s|html|/usr/share/nginx/html|' \
    "$DESTDIR/etc/nginx/nginx.conf"
  rm -- "$DESTDIR/etc/nginx"/*.default

  vmkdir usr/share/nginx
  mv "$DESTDIR/etc/nginx/html" "$DESTDIR/usr/share/nginx"

  vman man/nginx.8

  vlicense LICENSE
  vsv nginx
}

nginx-mod-http-geoip_package() {
  short_desc+=" - HTTP GeoIP module"
  depends="$sourcepkg>=${version}_$revision"
  pkg_install() {
    vmove usr/lib/nginx/modules/ngx_http_geoip_module.so
  }
}

nginx-mod-http-js_package() {
  short_desc+=" - HTTP njs module"
  depends="$sourcepkg>=${version}_$revision"
  pkg_install() {
    vmove usr/lib/nginx/modules/ngx_http_js_module.so
  }
}

nginx-mod-http-perl_package() {
  short_desc+=" - Perl module"
  depends="$sourcepkg>=${version}_$revision"
  pkg_install() {
    vmove usr/lib/nginx/modules/ngx_http_perl_module.so
  }
}

nginx-mod-http-xslt-filter_package() {
  short_desc+=" - XSLT filter module"
  depends="$sourcepkg>=${version}_$revision"
  pkg_install() {
    vmove usr/lib/nginx/modules/ngx_http_xslt_filter_module.so
  }
}

nginx-mod-stream_package() {
  short_desc+=" - Stream module"
  depends="$sourcepkg>=${version}_$revision"
  pkg_install() {
    vmove usr/lib/nginx/modules/ngx_stream_module.so
  }
}

nginx-mod-stream-js_package() {
  short_desc+=" - Stream njs module"
  depends="$sourcepkg>=${version}_$revision"
  pkg_install() {
    vmove usr/lib/nginx/modules/ngx_stream_js_module.so
  }
}

nginx-mod-stream-geoip_package() {
  short_desc+=" - Stream GeoIP module"
  depends="$sourcepkg>=${version}_$revision"
  pkg_install() {
    vmove usr/lib/nginx/modules/ngx_stream_geoip_module.so
  }
}

# REMARKS:
#
# On update, the pregenerated header file for ARM may need
# synchronization. See srcpkgs/nginx/files/ngx_auto_config.h.armv6l.patch
# for more information.
#
# Consider using mime.types from mime-types package. See comments in
# mime-types template.

# vim: set filetype=sh foldmethod=marker foldlevel=0 nowrap:
