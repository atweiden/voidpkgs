maintainer="nox"
pkgname="llvm12"
version=12.0.1
revision=4
short_desc="Low Level Virtual Machine"
depends="libllvm12>=${version}_$revision"
makedepends+=" binutils-devel"
makedepends+=" elfutils-devel"
makedepends+=" libatomic-devel"
makedepends+=" libedit-devel"
makedepends+=" libffi-devel"
makedepends+=" libxml2-devel"
makedepends+=" python3-devel"
makedepends+=" zlib-devel"
hostmakedepends+=" libffi-devel"
hostmakedepends+=" perl"
hostmakedepends+=" python3"
hostmakedepends+=" python3-Sphinx"
hostmakedepends+=" python3-recommonmark"
hostmakedepends+=" python3-sphinx-automodapi"
hostmakedepends+=" swig"
hostmakedepends+=" zlib-devel"
homepage="https://www.llvm.org"
license="Apache-2.0"
distfiles="https://github.com/llvm/llvm-project/releases/download/llvmorg-$version/llvm-project-$version.src.tar.xz"
checksum="129cb25cd13677aad951ce5c2deb0fe4afc1e9d98950f53b51bdcfb5a73afa0e"
build_wrksrc="llvm"
build_style="cmake"
configure_args+=" -DCMAKE_BUILD_TYPE=Release"
configure_args+=" -DENABLE_LINKER_BUILD_ID=YES"
configure_args+=" -DLIBCXXABI_ENABLE_STATIC_UNWINDER=YES"
configure_args+=" -DLIBCXXABI_USE_LLVM_UNWINDER=YES"
configure_args+=" -DLIBCXX_CXX_ABI=libcxxabi"
configure_args+=" -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=YES"
configure_args+=" -DLIBOMP_ENABLE_SHARED=YES"
configure_args+=" -DLIBOMP_INSTALL_ALIASES=NO"
configure_args+=" -DLLDB_USE_SYSTEM_SIX=YES"
configure_args+=" -DLLVM_BINUTILS_INCDIR=/usr/include"
configure_args+=" -DLLVM_BUILD_DOCS=YES"
configure_args+=" -DLLVM_BUILD_LLVM_DYLIB=YES"
configure_args+=" -DLLVM_ENABLE_FFI=YES"
configure_args+=" -DLLVM_ENABLE_RTTI=YES"
configure_args+=" -DLLVM_ENABLE_SPHINX=YES"
configure_args+=" -DLLVM_INCLUDE_DOCS=YES"
configure_args+=" -DLLVM_INSTALL_UTILS=YES"
configure_args+=" -DLLVM_LINK_LLVM_DYLIB=YES"
configure_args+=" -DSPHINX_WARNINGS_AS_ERRORS=NO"
configure_args+=" -Wno-dev"
# "operand out of range" assembler failures
case "$XBPS_TARGET_MACHINE" in
  ppc64*) ;;
  ppc*) configure_args+=" -DCLANG_ENABLE_CLANGD=OFF" ;;
esac
python_version=3
lib32disabled="yes"

if [[ "$XBPS_TARGET_LIBC" == "musl" ]]; then
  depends+=" libexecinfo-devel"
  makedepends+=" libexecinfo-devel"
  configure_args+=" -DLIBCXX_HAS_MUSL_LIBC=YES"
fi

post_patch() {
  # update config.guess for better platform detection
  cp "$XBPS_COMMONDIR/environment/configure/automake/config.guess" \
    "$wrksrc/llvm/cmake"

  # fix linker failures on some archs
  vsed \
    -i \
    -e 's,check_library_exists(gcc_s .*,set(LIBCXXABI_HAS_GCC_S_LIB ON),' \
    "$wrksrc/libcxxabi/cmake/config-ix.cmake"
  vsed \
    -i \
    -e 's,check_library_exists(gcc .*,set(LIBCXXABI_HAS_GCC_LIB ON),' \
    "$wrksrc/libcxxabi/cmake/config-ix.cmake"

  # need libssp_nonshared on some musl platforms (because of nodefaultlibs)
  case "$XBPS_TARGET_MACHINE" in
    ppc64*)
      ;;
    ppc*-musl|i686-musl|mips*-musl)
      vsed \
        -i \
        -e 's,^# Setup flags.$,add_library_flags(ssp_nonshared),' \
        "$wrksrc/libunwind/src/CMakeLists.txt"
      vsed \
        -i \
        -e 's,^# Setup flags.$,add_library_flags(ssp_nonshared),' \
        "$wrksrc/libcxxabi/src/CMakeLists.txt"
      vsed \
        -i \
        -e 's,#ssp,,' \
        "$wrksrc/libcxx/CMakeLists.txt"
      ;;
  esac

  case "$XBPS_TARGET_MACHINE" in
    # some sanitizer currently only on x86_64 stuff needs backtrace
    x86_64-musl)
      vsed \
        -i \
        -e 's,# Set common link flags.,list(APPEND SANITIZER_COMMON_LINK_LIBS execinfo),' \
        "$wrksrc/compiler-rt/CMakeLists.txt"
      ;;
    # sanitizer code is broken since it duplicates some libc bits
    arm*-musl|i686-musl)
      vsed \
        -i \
        -e 's/set(COMPILER_RT_HAS_SANITIZER_COMMON TRUE)/set(COMPILER_RT_HAS_SANITIZER_COMMON FALSE)/' \
        "$wrksrc/compiler-rt/cmake/config-ix.cmake"
      ;;
  esac
}

pre_configure() {
  local triplet

  # vastly reduce size of debugging symbols
  CFLAGS="${CFLAGS/ -g/ -g1}"
  CXXFLAGS="${CXXFLAGS/ -g/ -g1}"

  # since gcc9, the build likes to blow up for ppc32 apparently because
  # of clang being too large for a 24-bit relative call to the PLT,
  # so optimize for size instead
  case "$XBPS_TARGET_MACHINE" in
    ppc64*)
      ;;
    mips*-musl|ppc*)
      configure_args+=" -DVOID_CXX_OPT_FLAGS=-Os"
      ;;
  esac

  if [[ -n "$CROSS_BUILD" ]]; then
    msg_normal "Building host tblgen\n"
    mkdir -p build/HOST
    cd build/HOST
    CC="$BUILD_CC" \
    CFLAGS="$BUILD_CFLAGS" \
    CXX="$BUILD_CXX" \
    CXXFLAGS="$BUILD_CXXFLAGS" \
    LDFLAGS="$BUILD_LDFLAGS" \
      cmake ../.. \
        -DCMAKE_BUILD_TYPE="Release"
    make "$makejobs" -C utils/TableGen
    make "$makejobs" -C tools/clang/utils/TableGen
    [[ "$_lldb_enable" == "yes" ]] \
      && make "$makejobs" -C tools/lldb/utils/TableGen
    configure_args+=" -DLLVM_TABLEGEN=$wrksrc/llvm/build/HOST/bin/llvm-tblgen"
    configure_args+=" -DCLANG_TABLEGEN=$wrksrc/llvm/build/HOST/bin/clang-tblgen"
    cd ../..
  fi

  case "$XBPS_TARGET_MACHINE" in
    i686*)
      _arch="X86"
      ;;
    x86_64*)
      _arch="X86"
      ;;
    armv5*)
      _arch="Armv5te"
      ;;
    armv6*)
      _arch="Armv6"
      ;;
    armv7*)
      _arch="Armv7"
      ;;
    aarch64*)
      _arch="AArch64"
      ;;
    mips*)
      _arch="Mips"
      ;;
    ppc*)
      _arch="PowerPC"
      ;;
    riscv64*)
      _arch="RISCV64"
      ;;
  esac

  triplet="${XBPS_CROSS_TRIPLET:-$XBPS_TRIPLET}"

  configure_args+=" -DLLVM_TARGET_ARCH=$_arch"
  configure_args+=" -DLLVM_HOST_TRIPLE=$triplet"
  configure_args+=" -DLLVM_DEFAULT_TARGET_TRIPLE=$triplet"
}

do_install() {
  cd build
  cmake -DCMAKE_INSTALL_PREFIX="$DESTDIR/usr" -P cmake_install.cmake

  # required for multilib
  if [[ "$XBPS_TARGET_MACHINE" == "x86_64" ]]; then
    for _header in llvm-config; do
      mv $DESTDIR/usr/include/llvm/Config/$_header{,-64}.h
      vinstall "$FILESDIR/llvm-Config-$_header.h" 644 \
        usr/include/llvm/Config "$_header.h"
    done
  fi

  # remove llvm-config-host in cross builds
  if [[ -n "$CROSS_BUILD" ]]; then
    rm -f "$DESTDIR/usr/bin/llvm-config-host"
  fi
}

libllvm12_package() {
  short_desc+=" - runtime library"
  pkg_install() {
    vmove "usr/lib/libLLVM-*.so*"
  }
}

# vim: set filetype=sh foldmethod=marker foldlevel=0 nowrap:
