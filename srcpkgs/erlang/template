maintainer="nox"
pkgname="erlang"
version=22.3.3
revision=1
short_desc="Concurrent functional programming language developed by Ericsson"
makedepends+=" libressl-devel"
makedepends+=" ncurses-devel"
makedepends+=" unixodbc-devel"
makedepends+=" zlib-devel"
hostmakedepends+=" autoconf"
hostmakedepends+=" libxslt"
hostmakedepends+=" perl"
hostmakedepends+=" tar"
license="Apache-2.0"
homepage="http://www.erlang.org/"
changelog="https://github.com/erlang/otp/releases"
distfiles="https://github.com/erlang/otp/archive/OTP-$version.tar.gz"
checksum="58ef3623cad5f490fdc0719514fe1a9626c8b177a4fb8fa25b5bec0216693eb9"
create_wrksrc="yes"
build_wrksrc="otp-OTP-$version"
build_style="gnu-configure"
make_install_target+=" install"
make_install_target+=" install-docs"

case "$XBPS_TARGET_MACHINE" in
  *-musl)
    configure_args+=" --disable-hipe"
    ;;
esac

pre_configure() {
  ./otp_build autoconf
  if [[ -n "$CROSS_BUILD" ]]; then
    # build the bootstrap compiler for the host platform
    env - PATH="/usr/bin:/usr/sbin" ./configure --enable-bootstrap-only
    env - PATH="/usr/bin:/usr/sbin" HOME="$HOME" make "$makejobs"
    configure_args+=" --build=$(erts/autoconf/config.guess)"
    export erl_xcomp_sysroot="/usr/$XBPS_CROSS_TRIPLET"
  fi
}

post_configure() {
  vsed \
    -i \
    -e '/LDFLAGS =/s/=/+=/' \
    lib/odbc/c_src/*/Makefile
}

post_install() {
  local manprefix
  # remove PR template and PDF documentation
  rm "$DESTDIR/usr/lib/erlang/PR.template"
  find "$DESTDIR/usr/lib/erlang" -path '*/doc/pdf' -type d -exec rm -rf '{}' \;
  find "$DESTDIR/usr/lib/erlang" -iname '*.pdf' -delete
  # make section 1 pages available outside erlang
  vmkdir usr/share/man/man1
  manprefix="/usr/lib/erlang/man/man1"
  for i in $(find "$DESTDIR$manprefix" -type f)
  do
    ln -sf "$manprefix/${i##*/}" "$DESTDIR/usr/share/man/man1"
  done
}

erlang-doc_package() {
  short_desc="Erlang programming language documentation and examples"
  depends="$sourcepkg-${version}_$revision"
  archs="noarch"
  pkg_install() {
    vmove usr/lib/erlang/doc
    for i in $(cd "$DESTDIR"; find usr/lib/erlang -type d \( -path '*/examples' -o -path '*/doc/html' \))
    do
      vmove "$i"
    done
  }
}

# vim: set filetype=sh foldmethod=marker foldlevel=0 nowrap:
