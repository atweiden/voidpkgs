From dcfd289bb2f46fd50c9a60707e447a610cc52591 Mon Sep 17 00:00:00 2001
From: Andy Weidenbaum <atweiden@ioiojo.com>
Date: Sun, 10 Dec 2023 11:43:02 +0000
Subject: [PATCH] disable warning CXXFLAGS for void

---
 configure.ac | 120 +++++++++++++++++++++++++--------------------------
 1 file changed, 60 insertions(+), 60 deletions(-)

diff --git a/configure.ac b/configure.ac
index aa8bb04..938db38 100644
--- a/configure.ac
+++ b/configure.ac
@@ -327,15 +327,15 @@ fi
 #    enables warnings about compatibility with newer versions of C++ (we need the explicit enabling,
 #    even with `-Weverything`, because the earlier disabling of older versions removes some warnings
 #    that we do want)
-DESIRED_WARNING_CXXFLAGS="\
-  --system-header-prefix=boost --system-header-prefix=crypto/ctaes --system-header-prefix=db_cxx \
-  --system-header-prefix=event2 --system-header-prefix=gmock --system-header-prefix=gtest \
-  --system-header-prefix=leveldb --system-header-prefix=rust --system-header-prefix=sodium \
-  --system-header-prefix=univalue --system-header-prefix=zmq \
-  -Weverything \
-  -Wno-aix-compat -Wno-c++-compat \
-  -Wno-c++98-compat-pedantic -Wno-c++11-compat-pedantic -Wno-c++14-compat-pedantic \
-  -Wc++17-compat-pedantic -Wc++20-compat-pedantic"
+#DESIRED_WARNING_CXXFLAGS="\
+#  --system-header-prefix=boost --system-header-prefix=crypto/ctaes --system-header-prefix=db_cxx \
+#  --system-header-prefix=event2 --system-header-prefix=gmock --system-header-prefix=gtest \
+#  --system-header-prefix=leveldb --system-header-prefix=rust --system-header-prefix=sodium \
+#  --system-header-prefix=univalue --system-header-prefix=zmq \
+#  -Weverything \
+#  -Wno-aix-compat -Wno-c++-compat \
+#  -Wno-c++98-compat-pedantic -Wno-c++11-compat-pedantic -Wno-c++14-compat-pedantic \
+#  -Wc++17-compat-pedantic -Wc++20-compat-pedantic"
 
 # This list should be incrementally pruned. Each flag should either be enabled or moved to
 # `DESIRED_WARNING_CXXFLAGS` with an explanation as to why it remains disabled.
@@ -354,59 +354,59 @@ DESIRED_WARNING_CXXFLAGS="\
 #    same as fields
 # • `-Wno-string-conversion`: currently abused to `assert` on strings
 # • `-Wno-tautological-type-limit-compare`: I think isn’t portable because of numeric type sizing
-DISABLED_WARNING_CXXFLAGS="\
-  -Wno-c++20-compat -Wno-cast-align -Wno-cast-qual -Wno-comma -Wno-conditional-uninitialized \
-  -Wno-covered-switch-default -Wno-ctad-maybe-unsupported \
-  -Wno-delete-non-abstract-non-virtual-dtor -Wno-deprecated-copy -Wno-deprecated-copy-dtor \
-  -Wno-deprecated-dynamic-exception-spec -Wno-disabled-macro-expansion -Wno-documentation \
-  -Wno-documentation-unknown-command -Wno-double-promotion -Wno-exit-time-destructors \
-  -Wno-extra-semi -Wno-extra-semi-stmt -Wno-float-conversion -Wno-float-equal \
-  -Wno-format-nonliteral -Wno-global-constructors -Wno-header-hygiene -Wno-ignored-qualifiers \
-  -Wno-implicit-fallthrough -Wno-implicit-int-conversion -Wno-implicit-int-float-conversion \
-  -Wno-inconsistent-missing-destructor-override -Wno-logical-op-parentheses \
-  -Wno-misleading-indentation -Wno-mismatched-tags -Wno-missing-noreturn -Wno-missing-prototypes \
-  -Wno-missing-variable-declarations -Wno-newline-eof -Wno-non-virtual-dtor -Wno-old-style-cast \
-  -Wno-overloaded-virtual -Wno-padded -Wno-pedantic -Wno-range-loop-construct \
-  -Wno-redundant-parens -Wno-reorder-ctor -Wno-reserved-id-macro -Wno-reserved-identifier \
-  -Wno-return-type -Wno-shadow -Wno-shadow-field -Wno-shadow-field-in-constructor \
-  -Wno-shift-sign-overflow -Wno-shorten-64-to-32 -Wno-sign-compare -Wno-sign-conversion \
-  -Wno-string-conversion -Wno-suggest-destructor-override -Wno-suggest-override -Wno-switch-enum \
-  -Wno-tautological-type-limit-compare -Wno-tautological-unsigned-enum-zero-compare \
-  -Wno-tautological-unsigned-zero-compare -Wno-thread-safety-attributes \
-  -Wno-thread-safety-negative -Wno-undef -Wno-undefined-func-template -Wno-uninitialized \
-  -Wno-unreachable-code -Wno-unreachable-code-break -Wno-unreachable-code-return \
-  -Wno-unused-but-set-variable -Wno-unused-exception-parameter -Wno-unused-function \
-  -Wno-unused-macros -Wno-unused-member-function -Wno-unused-parameter -Wno-unused-private-field \
-  -Wno-unused-template -Wno-unused-variable -Wno-used-but-marked-unused -Wno-weak-vtables \
-  -Wno-zero-as-null-pointer-constant"
+#DISABLED_WARNING_CXXFLAGS="\
+#  -Wno-c++20-compat -Wno-cast-align -Wno-cast-qual -Wno-comma -Wno-conditional-uninitialized \
+#  -Wno-covered-switch-default -Wno-ctad-maybe-unsupported \
+#  -Wno-delete-non-abstract-non-virtual-dtor -Wno-deprecated-copy -Wno-deprecated-copy-dtor \
+#  -Wno-deprecated-dynamic-exception-spec -Wno-disabled-macro-expansion -Wno-documentation \
+#  -Wno-documentation-unknown-command -Wno-double-promotion -Wno-exit-time-destructors \
+#  -Wno-extra-semi -Wno-extra-semi-stmt -Wno-float-conversion -Wno-float-equal \
+#  -Wno-format-nonliteral -Wno-global-constructors -Wno-header-hygiene -Wno-ignored-qualifiers \
+#  -Wno-implicit-fallthrough -Wno-implicit-int-conversion -Wno-implicit-int-float-conversion \
+#  -Wno-inconsistent-missing-destructor-override -Wno-logical-op-parentheses \
+#  -Wno-misleading-indentation -Wno-mismatched-tags -Wno-missing-noreturn -Wno-missing-prototypes \
+#  -Wno-missing-variable-declarations -Wno-newline-eof -Wno-non-virtual-dtor -Wno-old-style-cast \
+#  -Wno-overloaded-virtual -Wno-padded -Wno-pedantic -Wno-range-loop-construct \
+#  -Wno-redundant-parens -Wno-reorder-ctor -Wno-reserved-id-macro -Wno-reserved-identifier \
+#  -Wno-return-type -Wno-shadow -Wno-shadow-field -Wno-shadow-field-in-constructor \
+#  -Wno-shift-sign-overflow -Wno-shorten-64-to-32 -Wno-sign-compare -Wno-sign-conversion \
+#  -Wno-string-conversion -Wno-suggest-destructor-override -Wno-suggest-override -Wno-switch-enum \
+#  -Wno-tautological-type-limit-compare -Wno-tautological-unsigned-enum-zero-compare \
+#  -Wno-tautological-unsigned-zero-compare -Wno-thread-safety-attributes \
+#  -Wno-thread-safety-negative -Wno-undef -Wno-undefined-func-template -Wno-uninitialized \
+#  -Wno-unreachable-code -Wno-unreachable-code-break -Wno-unreachable-code-return \
+#  -Wno-unused-but-set-variable -Wno-unused-exception-parameter -Wno-unused-function \
+#  -Wno-unused-macros -Wno-unused-member-function -Wno-unused-parameter -Wno-unused-private-field \
+#  -Wno-unused-template -Wno-unused-variable -Wno-used-but-marked-unused -Wno-weak-vtables \
+#  -Wno-zero-as-null-pointer-constant"
 
 # These are sub-flags of those in `DISABLED_WARNING_CXXFLAGS` that allow us to temporarily
 # re-enable pieces until the disabling flags are removed.
-REENABLED_WARNING_CXXFLAGS="\
-  -Wbit-int-extension -Wc++11-extra-semi -Wc++11-long-long -Wc++14-attribute-extensions \
-  -Wc++14-binary-literal -Wc++17-attribute-extensions -Wc++20-attribute-extensions \
-  -Wc11-extensions -Wcomplex-component-init -Wdelimited-escape-sequence-extension \
-  -Wdocumentation-deprecated-sync -Wdocumentation-html -Wembedded-directive -Wempty-init-stmt \
-  -Wempty-translation-unit -Wfixed-enum-extension -Wflexible-array-extensions \
-  -Wfloat-overflow-conversion -Wfloat-zero-conversion -Wfuture-attribute-extensions \
-  -Wgnu-auto-type -Wgnu-binary-literal -Wgnu-case-range -Wgnu-complex-integer \
-  -Wgnu-compound-literal-initializer -Wgnu-conditional-omitted-operand -Wgnu-empty-initializer \
-  -Wgnu-empty-struct -Wgnu-flexible-array-initializer -Wgnu-flexible-array-union-member \
-  -Wgnu-imaginary-constant -Wgnu-include-next -Wgnu-label-as-value -Wgnu-line-marker \
-  -Wgnu-null-pointer-arithmetic -Wgnu-pointer-arith -Wgnu-redeclared-enum \
-  -Wgnu-statement-expression -Wgnu-union-cast -Wgnu-zero-line-directive \
-  -Wignored-reference-qualifiers -Wimplicit-const-int-float-conversion \
-  -Wimplicit-fallthrough-per-function -Wimport-preprocessor-directive-pedantic -Winvalid-utf8 \
-  -Wkeyword-macro -Wlanguage-extension-token -Wlong-long -Wmicrosoft-charize \
-  -Wmicrosoft-comment-paste -Wmicrosoft-cpp-macro -Wmicrosoft-end-of-file -Wmicrosoft-enum-value \
-  -Wmicrosoft-fixed-enum -Wmicrosoft-flexible-array -Wmicrosoft-redeclare-static \
-  -Wnested-anon-types -Wnullability-extension -Wobjc-signed-char-bool-implicit-int-conversion \
-  -Woverlength-strings -Wpre-c++2b-compat -Wretained-language-linkage \
-  -Wshadow-field-in-constructor-modified -Wshadow-ivar -Wsometimes-uninitialized \
-  -Wstatic-self-init -Wundefined-internal-type -Wunneeded-member-function \
-  -Wunreachable-code-fallthrough -Wunreachable-code-generic-assoc -Wunreachable-code-loop-increment"
+#REENABLED_WARNING_CXXFLAGS="\
+#  -Wbit-int-extension -Wc++11-extra-semi -Wc++11-long-long -Wc++14-attribute-extensions \
+#  -Wc++14-binary-literal -Wc++17-attribute-extensions -Wc++20-attribute-extensions \
+#  -Wc11-extensions -Wcomplex-component-init -Wdelimited-escape-sequence-extension \
+#  -Wdocumentation-deprecated-sync -Wdocumentation-html -Wembedded-directive -Wempty-init-stmt \
+#  -Wempty-translation-unit -Wfixed-enum-extension -Wflexible-array-extensions \
+#  -Wfloat-overflow-conversion -Wfloat-zero-conversion -Wfuture-attribute-extensions \
+#  -Wgnu-auto-type -Wgnu-binary-literal -Wgnu-case-range -Wgnu-complex-integer \
+#  -Wgnu-compound-literal-initializer -Wgnu-conditional-omitted-operand -Wgnu-empty-initializer \
+#  -Wgnu-empty-struct -Wgnu-flexible-array-initializer -Wgnu-flexible-array-union-member \
+#  -Wgnu-imaginary-constant -Wgnu-include-next -Wgnu-label-as-value -Wgnu-line-marker \
+#  -Wgnu-null-pointer-arithmetic -Wgnu-pointer-arith -Wgnu-redeclared-enum \
+#  -Wgnu-statement-expression -Wgnu-union-cast -Wgnu-zero-line-directive \
+#  -Wignored-reference-qualifiers -Wimplicit-const-int-float-conversion \
+#  -Wimplicit-fallthrough-per-function -Wimport-preprocessor-directive-pedantic -Winvalid-utf8 \
+#  -Wkeyword-macro -Wlanguage-extension-token -Wlong-long -Wmicrosoft-charize \
+#  -Wmicrosoft-comment-paste -Wmicrosoft-cpp-macro -Wmicrosoft-end-of-file -Wmicrosoft-enum-value \
+#  -Wmicrosoft-fixed-enum -Wmicrosoft-flexible-array -Wmicrosoft-redeclare-static \
+#  -Wnested-anon-types -Wnullability-extension -Wobjc-signed-char-bool-implicit-int-conversion \
+#  -Woverlength-strings -Wpre-c++2b-compat -Wretained-language-linkage \
+#  -Wshadow-field-in-constructor-modified -Wshadow-ivar -Wsometimes-uninitialized \
+#  -Wstatic-self-init -Wundefined-internal-type -Wunneeded-member-function \
+#  -Wunreachable-code-fallthrough -Wunreachable-code-generic-assoc -Wunreachable-code-loop-increment"
 
-WARNING_CXXFLAGS="$DESIRED_WARNING_CXXFLAGS $DISABLED_WARNING_CXXFLAGS $REENABLED_WARNING_CXXFLAGS"
+#WARNING_CXXFLAGS="$DESIRED_WARNING_CXXFLAGS $DISABLED_WARNING_CXXFLAGS $REENABLED_WARNING_CXXFLAGS"
 
 enable_sse42=no
 enable_sse41=no
@@ -781,7 +781,7 @@ if test x$use_hardening != xno; then
       # • `-Wno-unknown-warning-option`: The macOS build uses Xcode’s clang, which is relatively old
       #    and doesn’t support all the warnings that other platforms do, so we ignore complaints
       #    about unsupported warnings.
-      WARNING_CXXFLAGS="$WARNING_CXXFLAGS -Wno-return-std-move-in-c++11 -Wno-unknown-warning-option"
+      #WARNING_CXXFLAGS="$WARNING_CXXFLAGS -Wno-return-std-move-in-c++11 -Wno-unknown-warning-option"
     else
       AX_CHECK_LINK_FLAG([[-pie]], [HARDENED_LDFLAGS="$HARDENED_LDFLAGS -pie"],[AC_MSG_ERROR(Cannot enable -pie)])
     fi
@@ -1225,7 +1225,7 @@ AC_SUBST(RUST_VENDORED_SOURCES)
 AC_SUBST(RELDFLAGS)
 AC_SUBST(DEBUG_CPPFLAGS)
 AC_SUBST(DEBUG_CXXFLAGS)
-AC_SUBST(WARNING_CXXFLAGS)
+#AC_SUBST(WARNING_CXXFLAGS)
 AC_SUBST(ERROR_CXXFLAGS)
 AC_SUBST(GPROF_CXXFLAGS)
 AC_SUBST(GPROF_LDFLAGS)
-- 
2.43.0

