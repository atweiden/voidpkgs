maintainer="nox"
pkgname="glibc"
version=2.38
revision=1
short_desc="GNU C library"
archs="~*-musl"
makedepends="kernel-libc-headers"
if [[ -n "$CHROOT_READY" ]]; then
  hostmakedepends+=" bison"
  hostmakedepends+=" gettext"
  hostmakedepends+=" perl"
  hostmakedepends+=" python3"
  hostmakedepends+=" texinfo"
fi
homepage="http://www.gnu.org/software/libc"
license="GPL-2.0-or-later, LGPL-2.1-or-later, BSD-3-Clause"
distfiles="$GNU_SITE/libc/glibc-$version.tar.xz"
checksum="fb82998998b2b29965467bc1b69d152e9c307d2cf301c9eafb4555b770ef3fd2"
conf_files+=" /etc/gai.conf"
conf_files+=" /etc/ld.so.conf"
conf_files+=" /etc/rpc"
# do not strip these files, objcopy errors out
nostrip_files+=" POSIX_V6_ILP32_OFF32"
nostrip_files+=" POSIX_V6_ILP32_OFFBIG"
nostrip_files+=" POSIX_V6_LP64_OFF64"
nostrip_files+=" POSIX_V7_ILP32_OFF32"
nostrip_files+=" POSIX_V7_ILP32_OFFBIG"
nostrip_files+=" POSIX_V7_LP64_OFF64"
nostrip_files+=" XBS5_ILP32_OFF32"
nostrip_files+=" XBS5_ILP32_OFFBIG"
nostrip_files+=" XBS5_LP64_OFF64"
nostrip_files+=" ld-linux-aarch64.so.1"
nostrip_files+=" ld-linux-armhf.so.3"
nostrip_files+=" ld-linux-x86-64.so.2"
nostrip_files+=" ld-linux.so.2"
nostrip_files+=" ld-linux.so.3"
nostrip_files+=" ld.so.1"
nostrip_files+=" ld64.so.2"
nostrip_files+=" libBrokenLocale.so.1"
nostrip_files+=" libc.so.6"
nostrip_files+=" libc_malloc_debug.so.0"
nostrip_files+=" libm.so.6"
nostrip_files+=" libmemusage.so"
nostrip_files+=" libmvec.so.1"
nostrip_files+=" libnsl.so.1"
nostrip_files+=" libnss_compat.so.2"
nostrip_files+=" libnss_db.so.2"
nostrip_files+=" libnss_dns.so.2"
nostrip_files+=" libnss_files.so.2"
nostrip_files+=" libnss_hesiod.so.2"
nostrip_files+=" libresolv.so.2"
nostrip_files+=" libthread_db.so.1"
lib32files="/usr/lib/gconv/gconv-modules"
lib32symlinks="ld-linux.so.2"
bootstrap="yes"
if [[ "$XBPS_TARGET_LIBC" == "musl" ]]; then
  broken="no point in building this for musl"
fi

do_configure() {
  local _libdir

  mkdir build
  cd build

  _libdir="/usr/lib$XBPS_TARGET_WORDSIZE"

  echo "slibdir=$_libdir" > configparms
  echo "bindir=/usr/bin" >> configparms
  echo "sbindir=/usr/bin" >> configparms
  echo "rootsbindir=/usr/sbin" >> configparms

  case "$XBPS_TARGET_MACHINE" in
    # build with -mno-tls-direct-seg-refs to avoid performance problems
    # with Xen on x86 32bit
    i686)
      export CFLAGS+=" -mno-tls-direct-seg-refs"
      ;;
    # force hard float ABI: --with-float=hard --with-fpu=<fpu>
    # force soft float ABI: --with-float=soft --without-fp
    armv5*)
      configure_args+=" --with-march=armv5te --without-fp --with-float=soft"
      ;;
    armv6l*)
      configure_args+=" --with-march=armv6 --with-fpu=vfp --with-float=hard"
      ;;
    armv7l*)
      configure_args+=" --with-march=armv7-a --with-fpu=vfpv3 --with-float=hard"
      ;;
    arm64*)
      configure_args+=" --with-march=armv8-a"
      ;;
  esac

  if [[ -n "$CROSS_BUILD" ]]; then
    configure_args+=" --host=$XBPS_CROSS_TRIPLET"
    configure_args+=" --with-headers=$XBPS_CROSS_BASE/usr/include"
    configure_args+=" --with-sysroot=$XBPS_CROSS_BASE"
  else
    configure_args+=" --with-headers=$XBPS_MASTERDIR/usr/include"
  fi

  # disable SSP from CFLAGS (enabled below)
  export CFLAGS="${CFLAGS/-fstack-protector-strong/}"
  # disable FORTIFY_SOURCE
  export CFLAGS="${CFLAGS/-D_FORTIFY_SOURCE=?/}"

  SHELL="/bin/bash" ../configure \
    $configure_args \
    --bindir="/usr/bin" \
    --disable-profile \
    --disable-werror \
    --enable-bind-now \
    --enable-kernel="3.2.0" \
    --enable-multi-arch \
    --enable-stack-protector="strong" \
    --libdir="$_libdir" \
    --libexecdir="$_libdir" \
    --sbindir="/usr/bin" \
    --without-gd \
    --without-selinux \
    libc_cv_rootsbindir="/usr/bin" \
    libc_cv_rtlddir="$_libdir" \
    libc_cv_slibdir="$_libdir"
}

do_build() {
  # less verbose output when compiling and assembling
  sed \
    -i \
    -e 's|compile-command.c = \(.*\)|compile-command.c = @echo " CC     $<"; \1|' \
    -e 's|compile-command.cc = \(.*\)|compile-command.cc = @echo " CXX    $<"; \1|' \
    -e 's|compile-command.S = \(.*\)|compile-command.S = @echo " ASM    $<"; \1|' \
    Makerules
  cd build
  make "$makejobs"
}

do_install() {
  vlicense LICENSES

  # create $DESTDIR/etc/ld.so.conf
  mkdir -p "$DESTDIR/etc"
  echo "include /etc/ld.so.conf.d/*.conf" > "$DESTDIR/etc/ld.so.conf"

  cd build
  make install_root="$DESTDIR" install

  # create /etc/default/libc-locales
  vinstall "$FILESDIR/libc-locales" 644 etc/default
  cp "$wrksrc/localedata/SUPPORTED" "$wrksrc/build"
  sed \
    -i \
    -e "s|/| |g" \
    -e 's|\\| |g' \
    -e "s|SUPPORTED-LOCALES=||" \
    -e "s|^|#|g" \
    "$wrksrc/build/SUPPORTED"
  cat "$wrksrc/build/SUPPORTED" >> "$DESTDIR/etc/default/libc-locales"

  # ldd is a bash script, so make it run as such.
  replace_interpreter bash "$DESTDIR/usr/bin/ldd"

  # wrong 32bit dynamic linker when using elfv2 ABI
  case "$XBPS_TARGET_MACHINE" in
    ppc64*)
      vsed \
        -i \
        -e '/RTLDLIST=/s/ld.so.2/ld.so.1/g' \
        "$DESTDIR/usr/bin/ldd"
      ;;
  esac

  install -d "$DESTDIR/etc/ld.so.conf.d"
  echo "/usr/local/lib" > "$DESTDIR/etc/ld.so.conf.d/usr_local.conf"
  chmod 644 "$DESTDIR/etc/ld.so.conf.d/usr_local.conf"
  rm -f "$DESTDIR/etc/ld.so.cache"

  # create ld-linux.so.3 symlink for ARM
  case "$XBPS_TARGET_MACHINE" in
    armv?l)
      ln -sfr "$DESTDIR/usr/lib/ld-linux-armhf.so.3" "$DESTDIR/usr/lib/ld-linux.so.3"
      ;;
  esac

  vinstall "$wrksrc/posix/gai.conf" 644 etc
  rm -rf "$DESTDIR/var/db"
  # remove tzselect and z{dump,ic}, provided by tzutils
  rm -f "$DESTDIR/usr/bin/tzselect"
  rm -f "$DESTDIR/usr/bin"/z{dump,ic}

  mv "$DESTDIR/usr/sbin"/* "$DESTDIR/usr/bin"
}

glibc-devel_package() {
  lib32depends="glibc>=${version}_$revision"
  lib32files="/usr/include/gnu/stubs-32.h"
  depends+=" $makedepends"
  depends+=" glibc>=${version}_$revision"
  short_desc+=" - development files"
  pkg_install() {
    vmove usr/include
    vmove "usr/lib/*.a"
    vmove "usr/lib/*.o"
    if [[ -d "$DESTDIR/usr/share/info" ]]; then
      vmove usr/share/info
    fi
  }
}

glibc-locales_package() {
  conf_files="/etc/default/libc-locales"
  short_desc+=" - locale data files"
  pkg_install() {
    vmove etc/default
    vmove usr/share/i18n
    vmove usr/share/locale
  }
}

nscd_package() {
  conf_files="/etc/nscd.conf"
  short_desc+=" - Name Service Cache Daemon"
  pkg_install() {
    vmove usr/bin/nscd
    vinstall "$wrksrc/nscd/nscd.conf" 644 etc
    vsv nscd
  }
}

# vim: set filetype=sh foldmethod=marker foldlevel=0 nowrap:
