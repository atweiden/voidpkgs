maintainer="nox"
pkgname="nim"
version=1.4.2
revision=2
_cversion=0.20.0
_nimbleversion=0.12.0
_fusionversion="e942c649892b2ae3802851fba6bc5d251326e5fb"
short_desc="Nim programming language"
depends+=" gcc"
depends+=" openssl-devel"
makedepends="readline-devel"
hostmakedepends="ed"
homepage="https://nim-lang.org/"
license="MIT"
distfiles+=" https://github.com/nim-lang/Nim/archive/v$version.tar.gz"
distfiles+=" https://github.com/nim-lang/csources/archive/v$_cversion.tar.gz>csources-$_cversion.tar.gz"
distfiles+=" https://github.com/nim-lang/nimble/archive/v$_nimbleversion.tar.gz>nimble-$_nimbleversion.tar.gz"
distfiles+=" https://github.com/nim-lang/fusion/archive/$_fusionversion.tar.gz>fusion-$_fusionversion.tar.gz"
checksum+=" fc1e25aa2c667a34fe48160a79472fd5ced35af6478a535919d20b8821277a3a"
checksum+=" 5e6fd15d90df1a8cb7614c4ffc70aa8c4198cd854d7742016202b96dd0228d3c"
checksum+=" 0b88d91a450f31641f85379f2d76afb0a013cf783e62144a6534525b9cb1cbac"
checksum+=" 76d10a2f0f25ba7fb3393bdb800c75e8084758d8ce69e63d07926cd36f555084"
build_wrksrc="Nim-$version"
create_wrksrc="yes"

post_extract() {
  mv "csources-$_cversion" "$build_wrksrc/csources"
  mkdir "$build_wrksrc/dist"
  mv "nimble-$_nimbleversion" "$build_wrksrc/dist/nimble"
  mv "fusion-$_fusionversion" "$build_wrksrc/dist/fusion"
}

do_build() {
  # build csources
  pushd csources
  case "$XBPS_TARGET_MACHINE" in
    i686*)
      CC="cc" \
      CFLAGS="-Os -pipe" \
      LD="cc" \
      LDFLAGS= \
        sh build.sh \
          --cpu i686
      ;;
    *)
      CC="cc" \
      CFLAGS="-Os -pipe" \
      LD="cc" \
      LDFLAGS= \
        sh build.sh
      ;;
  esac
  popd

  # build nim
  ./bin/nim c \
    -d:danger \
    -d:release \
    koch
  ./koch boot \
    -d:danger \
    -d:release \
    -d:nativeStacktrace \
    -d:useGnuReadline

  # build nimble
  ./koch nimble

  case "$XBPS_TARGET_MACHINE" in
    aarch64*)
      _arch="arm64"
      ;;
    arm*)
      _arch="arm"
      ;;
    ppc64le*)
      _arch="powerpc64el"
      ;;
    ppc64*)
      _arch="powerpc64"
      ;;
    ppc*)
      _arch="powerpc"
      ;;
  esac

  case "$XBPS_TARGET_MACHINE" in
    arm*|aarch64*|ppc*)
      ed config/nim.cfg <<-EDIT
  ,s/^arm.linux.gcc.exe .*/arm.linux.gcc.exe = "$CC"/
  ,s/^arm.linux.gcc.linkerexe .*/arm.linux.gcc.linkerexe = "$CC"/
  a
  arm64.linux.gcc.exe = "$CC"
  arm64.linux.gcc.linkerexe = "$CC"
  powerpc.linux.gcc.exe = "$CC"
  powerpc.linux.gcc.linkerexe = "$CC"
  powerpc64.linux.gcc.exe = "$CC"
  powerpc64.linux.gcc.linkerexe = "$CC"
  powerpc64el.linux.gcc.exe = "$CC"
  powerpc64el.linux.gcc.linkerexe = "$CC"
  .
  w
  q
EDIT
      # build nimgrep and nimsuggest
      bin/nim c \
        -d:danger \
        -d:release \
        --cpu:"$_arch" \
        --os:linux \
        --listCmd \
        compiler/nim
      for _p in dist/nimble/src/nimble \
                tools/nimgrep \
                nimsuggest/nimsuggest \
                nimpretty/nimpretty; do
        bin/nim c \
          -d:danger \
          -d:release \
          --cpu:"$_arch" \
          --os:linux \
          --listCmd \
          "$_p"
        mv "$_p" bin
      done
      # build libnimrtl
      pushd lib
      ../bin/nim c \
        --app:lib \
        -d:createNimRtl \
        -d:danger \
        -d:release \
        --cpu:"$_arch" \
        --os:linux \
        nimrtl.nim
      popd
      ;;
    *)
      # build nimgrep and nimsuggest
      ./koch tools
      # build libnimrtl
      pushd lib
      ../bin/nim c \
        --app:lib \
        -d:createNimRtl \
        -d:danger \
        -d:release \
        nimrtl.nim
      popd
      ;;
  esac
}

do_install() {
  ./koch install "$DESTDIR/usr/lib"

  if [[ -n "$CROSS_BUILD" ]]; then
    mv compiler/nim "$DESTDIR/usr/lib/nim/bin/nim"
  fi

  vmkdir usr/bin
  vmkdir usr/share/nim
  ln -sf /usr/lib/nim/bin/nim "$DESTDIR/usr/bin/nim"
  for _f in nimble \
            nimsuggest \
            nimgrep \
            nimpretty; do
    chmod 0755 "bin/$_f"
    cp "bin/$_f" "$DESTDIR/usr/lib/nim/bin"
    ln -sf "/usr/lib/nim/bin/$_f" "$DESTDIR/usr/bin/$_f"
  done
  cp -r nimsuggest nimpretty doc examples "$DESTDIR/usr/lib/nim"
  ln -sf /usr/lib/nim/doc "$DESTDIR/usr/share/nim/doc"
  ln -sf /usr/lib/nim/examples "$DESTDIR/usr/share/nim/examples"
  ln -sf /usr/lib/nim/nimsuggest "$DESTDIR/usr/share/nim/nimsuggest"
  ln -sf /usr/lib/nim/nimpretty "$DESTDIR/usr/share/nim/nimpretty"
}

post_install() {
  vlicense copying.txt
}

# vim: set filetype=sh foldmethod=marker foldlevel=0 nowrap:
